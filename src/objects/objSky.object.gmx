<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSkyStand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.16;
attackPattern = 0; //The attack pattern is selected at random
hits = 8; //The HP of the boss
vel = 0; //the boss' current movement speed
attackFrames = random_range (60, 120);
alarm[0] = attackFrames;
ground = true;
sprite_old = sprSkyStand;
/*As per line 6, with the function random_range and the attackFrames variable, alarm[0] is 
set to be at a random time between 1-2 seconds (or between 60-120 frames, as the game runs 
at 60FPS)*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attackPattern = choose (1, 2, 3) //-1 = Regular stance, 0 = None, 1 = Wrench attack, 2 = Run, 3 = Jump and Wrench attack
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check if on the ground
if place_meeting (x, y+1, objSolid) &amp;&amp; vspeed &gt;= 0
{
   ground = true;
   gravity = 0;
}
else
{
    ground = false;
    gravity = 0.25;
}

//Set up the various attack patterns
if attackPattern == 0 //If there is no current attack pattern
{
    vel = 0;
    sprite_index = sprSkyStand;
    
    if instance_exists (objSonicModified) &amp;&amp; x &gt; objSonicModified.x
       image_xscale = 1;
    else if instance_exists (objSonicModified) &amp;&amp; x &lt; objSonicModified.x
         image_xscale = -1;
}
else //If there is
{
    if attackPattern == 1
    {
        sprite_index = sprSkyThrow;
        vel = 0;
        
        if image_index &gt; 7 &amp;&amp; sprite_index == sprSkyThrow
        {
           if ground == false
           {
              sprite_index = sprSkyFallN;
              gravity = 0.25;
           }
           else
           {
               sprite_index = sprSky;
               gravity = 0;
           }
           instance_create (x, y, objWrench);
           audio_play_sound (sndSkyJump, 10, false);
           attackPattern = -1;
        }
    }
    else if attackPattern == 2
    {
        sprite_index = sprSkyRun;
        vel = -4*image_xscale;
        
        if (x &gt;= 384 or x &lt;= 80)
        {
            attackPattern = 0;
            alarm[0] = attackFrames;
            vel = 0;
            
            if instance_exists (objSonicModified) &amp;&amp; x &lt; objSonicModified.x
               image_xscale = 1;
            if instance_exists (objSonicModified) &amp;&amp; x &gt; objSonicModified.x
               image_xscale = -1;
        }
    }
    else if attackPattern == 3
    {
        sprite_index = sprSkyJump;
        audio_play_sound (sndSkyJump, 10, false);
        
        vel = -4*image_xscale;
        vspeed = -11;
        ground = false;
        
        if y &lt;= 80
        {
            attackPattern = 1;
            vspeed = 0;
        }
        
        if (place_meeting (x+vel+1, y, objSolid) or place_meeting (x+vel-1, y, objSolid)) &amp;&amp; vel != 0
        {
            attackPattern = 0;
            alarm[0] = attackFrames;
        }
    }
}
x += vel;

//Set the angle (used when the boss is damaged)
if sprite_index == sprSkyHit
   image_angle = -45;
else
    image_angle = 0;

    
//If we still have health when we hit the ground, we are back in control
if sprite_index == sprSkyHit &amp;&amp; ground == true &amp;&amp; vspeed &gt;= 0
{
    attackPattern = 0;
    alarm[0] = attackFrames;
    gravity = 0;
    if hits &gt; 0
    {
        sprite_index = sprSkyStand;
    }
    else //Or if we have no health remaining, the boss is defeated and the act is clear
    {
        instance_change (objSkyDefeat, true);
        audio_play_sound (sndSkyDie, 10, false);
        vspeed = 0;
        gravity = 0;
        image_angle = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSolid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid (direction, 0.01);
vspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSonic">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.rings &gt; 0 or global.shield &gt; 0
{
    //Hurt the player
    if other.canHit == true
        scrHurtPlayer();
}
else
{
    //Kill the player
    if other.canHit == true
        with other instance_change (objSonicHitDie, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSonicModified">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.invincible == false &amp;&amp; global.superstate == 0 &amp;&amp; global.rings &gt; 0
{
with other
{
if atk=0 &amp;&amp; ready&lt;=0 &amp;&amp; enable=1
{
{
ready=200
action=9
audio_play_sound (sndSonicOugh, 10, false)

if global.shield == 0 &amp;&amp; global.rings &gt; 0
{
    audio_play_sound (sndRingLose, 10, false)
    
    if global.rings &lt;= 32 scrLoseRings(global.rings,x,y,objLoseRing) else scrLoseRings(32,x,y,objLoseRing)
    
    global.rings = 0;
}
else
{
    global.shield = 0
}

ground=0
vsp=-5
enable=0
}
}
}
}
else if global.rings == 0 &amp;&amp; global.shield == 0

with other
{
if atk=0 &amp;&amp; ready&lt;=0 &amp;&amp; enable=1 //Player dies if there are no rings
{
enable = 0;
ground = 0;
vsp = -5;
action = 9.5;
audio_play_sound (sndSonicOugh, 10, false);
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create (0, 0, objBossHP)
instance_create (0, 0, objSkyIcon);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index != sprite_old
{
    image_index = 0;
    sprite_old = sprite_index;
}

draw_sprite_ext (sprite_index, image_index, round(x), round(y), image_xscale, image_yscale, image_angle, image_blend, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
