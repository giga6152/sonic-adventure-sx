<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprShantaeStand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>objPlayer</parentName>
  <maskName>mskShantae</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>render = 10;
vel = 0;
yvel = 0;
yfr = 0.25;
ypl = 0;
layer = 0;
ground = true;
running = true;
attackStrengthDefault = (5+global.hair_power);
attackStrength = attackStrengthDefault;
crawling = false;
ducking = false;
whipping = false;
canMove = true;
fireball = false;
firechargeTimer = 0;
hsp = 0;
vsp = 0;
canGetHit = true;
dancemove = 0;
danceTimer = 0;
itemselection = 0;
itemselectionmax = 10;
sprite_old = sprShantaeStand;
inMaw = false;
mawshoot = false;
mhsp = 0;
mvsp = 0;
gunshoot = false;
gliding = false;
striking = false;
backdashing = false;
monstermilk_timer = 0;
super_monstermilk_timer = 0;

sprite = sprShantaeStand;
image = 0;
imspeed = 0.33;

cosine = 1;
sine = 0;

cs = 1;
sn = 0;

angle = 0;

steptimer = 10;

instance_change (objShantae, true);
instance_create (x, y, objShantaeStandWhipBound);

if room_width &gt; 480 &amp;&amp; room_height &gt; 360 instance_create (x, y, objCamera);
instance_create (x, y, objOptimize);

KEY_LEFT = keyboard_check (vk_left) //or (gamepad_axis_value (0, gp_axislh) &lt; -0.6);
KEY_RIGHT = keyboard_check (vk_right) //or (gamepad_axis_value (0, gp_axislh) &gt; 0.6);
KEY_DOWN = keyboard_check (vk_down) //or (gamepad_axis_value (0, gp_axislv) &gt; 0.6);
KEY_UP = keyboard_check (vk_up) //or (gamepad_axis_value (0, gp_axislv) &lt; -0.6);

KEY_LEFT_P = keyboard_check_pressed (vk_left) //or (gamepad_axis_value (0, gp_axislh) &lt; -0.6);
KEY_RIGHT_P = keyboard_check_pressed (vk_right) //or (gamepad_axis_value (0, gp_axislh) &gt; 0.6);
KEY_UP_P = keyboard_check_pressed (vk_up) //or (gamepad_axis_value (0, gp_axislv) &lt; -0.6);
KEY_DOWN_P = keyboard_check_pressed (vk_down) //or (gamepad_axis_value (0, gp_axislv) &gt; 0.6);

soundstep = sndStepGrass;

spriteold0 = sprShantaeStand;
spriteold1 = sprShantaeStand;
spriteold2 = sprShantaeStand;
imageold0 = 0;
imageold1 = 0;
imageold2 = 0;
xscaleold0 = 1;
xscaleold1 = 1;
xscaleold2 = 1;
xold0 = x;
xold1 = x;
xold2 = x;
yold0 = y;
yold1 = y;
yold2 = y;
aftertimer0 = 5;
aftertimer1 = 3;
aftertimer2 = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_change (objShantaeClear, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !keyboard_check (ord("C"))
{
    canMove = true;
    fireball = false;
    sprite_index = sprShantaeStand;
}
else
{
    canMove = false;
    fireball = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room == rmS2rm4 &amp;&amp; instance_exists (objDungeonDoor) &amp;&amp; objDungeonDoor.assignedDoor == "Dungeon 1"
{
    room_goto (rmTitlecard2SD);
    global.playerspawnx = -1;
    global.playerspawny = -1;
}
if room == rmD2rm4 &amp;&amp; instance_exists (objMiniDoor) &amp;&amp; objMiniDoor.assignedDoor == "Mini 1"
{
    room_goto (rmD2rm7);
    global.playerspawnx = -1;
    global.playerspawny = -1;
}
if room == rmD2rm7 &amp;&amp; instance_exists (objMiniDoor) &amp;&amp; objMiniDoor.assignedDoor == "Mini 1"
{
    room_goto (rmD2rm4);
    global.playerspawnx = 416;
    global.playerspawny = 128;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto (rmShop2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch dancemove
{
    case 1:
        instance_change (objShantaeMonkey, true);
    break;
    case 2:
         instance_change (objShantaeMonkey, true);
    break;
    
    case 3:
         instance_change (objShantaeMonkey, true);
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canPressZ = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canGetHit = true;
global.invincible = false;
image_alpha = 1;
audio_stop_sound (bgmInvincible);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canMove = true;
fireball = false;
sprite_index = sprShantaeStand;
//image_alpha = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>whipping = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement

/*Major angle calculations (useful for moving on slopes)

//Horizontal Movement
if vel &gt; 0
{
    repeat 0
    {
        if scrCollideSensorRightS (obstacle_layer | high_layer | low_layer, MaskLarge) break;
        
        x += cosine;
        y -= sine;
    }
}
else if vel &lt; 0
{
    repeat 0
    {
        if scrCollideSensorLeftS (obstacle_layer | high_layer | low_layer, MaskLarge) break;
        
        x -= cosine;
        y += sine;
    }
}

//Vertical movement
if vsp &gt; 0
{
    repeat 0
    {
        if scrCollideSensorBottomS (obstacle_layer | high_layer | low_layer, MaskLarge) break;
        y += 1;
    }
}
else if vsp &lt; 0
{
    repeat 0
    {
        if scrCollideSensorTopS (obstacle_layer | high_layer | low_layer, MaskLarge) break;
        y -= 1;
    }

    if scrCollideSensorTopS (obstacle_layer | high_layer | low_layer, MaskLarge) vsp = 0;
}

//Landing
if vsp &gt;= 0 &amp;&amp; !ground &amp;&amp; scrCollideSensorBottomS (obstacle_layer | high_layer | low_layer, MaskLarge) &amp;&amp; scrCollideSensorRight_lineS (obstacle_layer | high_layer | low_layer) &amp;&amp; scrCollideSensorLeft_lineS (obstacle_layer | high_layer | low_layer)
{
    angle = calculate_angleS (0, 8, obstacle_layer | high_layer | low_layer);
    cosine = cos(degtorad(angle));
    sine = sin(degtorad(angle));
    
    vel -= (sine*vsp);
    vsp = 0;
    ground = true;
    
    if sprite_index == sprShantaeFall sprite_index = sprShantaeStand;
}

//Wall collision
while scrCollideSensorRightS (obstacle_layer | high_layer | low_layer, MaskLarge)
{
    x -= cosine;
    y += sine;
}
while scrCollideSensorLeftS (obstacle_layer | high_layer | low_layer, MaskLarge)
{
    x += cosine;
    y -= sine;
}

//Slopes
if (ground)
{
   // Slopes up: If the main sensor is colliding with the background, push to up
   while (scrCollideSensorMainS(obstacle_layer | high_layer | low_layer))
   {
       x-=sine;
       y-=cosine;  
   }

   // Slopes down: If the main sensor isn't colliding with the background but the slope sensor does, push to down.
   while (!scrCollideSensorMainS(obstacle_layer | high_layer | low_layer) &amp;&amp; scrCollideSensorSlopes(obstacle_layer | high_layer | low_layer,MaskMedium))
   {
       x+=sine;
       y+=cosine;  
   }
}

//Get the new angle
if (ground &amp;&amp; scrCollideSensorLeft_lineS(obstacle_layer | high_layer | low_layer) &amp;&amp; scrCollideSensorRight_lineS(obstacle_layer | high_layer | low_layer))
{
    angle=calculate_angleS(angle,8,obstacle_layer | high_layer | low_layer);
    cosine=cos(degtorad(angle));
    sine=sin(degtorad(angle));
}
else
{
    angle=0;
    cosine=1;
    sine=0;
}

// Now do vertical Movement.
   if (!ground)
   {
     // If we aren't on the ground and we are falling and the bottom sensor is colliding, land
     if (vsp&gt;=0 &amp;&amp; scrCollideSensorBottomS(obstacle_layer | high_layer | low_layer,MaskLarge))
     {
        ground=1;
        vsp=0;
        if sprite_index == sprShantaeFall sprite_index = sprShantaeStand;       // If we were jumping, deactivate jump
     }
   } else {
     // Otherwise, if we are on the ground and the bottom sensor isn't colliding, fall.
     if (!scrCollideSensorBottomS(obstacle_layer | high_layer | low_layer,MaskLarge))    
     {
         ground=0;
     }
   }

if (ground)
{
     if (!scrCollideSensorLeft_lineS(obstacle_layer | high_layer | low_layer) || !scrCollideSensorRight_lineS(obstacle_layer | high_layer | low_layer))
     {
         angle = 0;
         sn = 0;
         cs = 1;
         ground = 0;
     }
}
mask_index = MaskMain2;*/

KEY_LEFT = keyboard_check (vk_left) //or (gamepad_axis_value (0, gp_axislh) &lt; -0.6);
KEY_RIGHT = keyboard_check (vk_right) //or (gamepad_axis_value (0, gp_axislh) &gt; 0.6);
KEY_DOWN = keyboard_check (vk_down) //or (gamepad_axis_value (0, gp_axislv) &gt; 0.6);
KEY_UP = keyboard_check (vk_up) //or (gamepad_axis_value (0, gp_axislv) &lt; -0.6);

KEY_LEFT_P = keyboard_check_pressed (vk_left) //or (gamepad_axis_value (0, gp_axislh) &lt; -0.6);
KEY_RIGHT_P = keyboard_check_pressed (vk_right) //or (gamepad_axis_value (0, gp_axislh) &gt; 0.6);
KEY_UP_P = keyboard_check_pressed (vk_up) //or (gamepad_axis_value (0, gp_axislv) &lt; -0.6);
KEY_DOWN_P = keyboard_check_pressed (vk_down) //or (gamepad_axis_value (0, gp_axislv) &gt; 0.6);

collision_left_wall = place_meeting(x+vel-1, y, objSolid2);
collision_right_wall = place_meeting(x+vel+1, y, objSolid2);
collision_ceil = place_meeting(x, y+yvel-1, objSolid2);
collision_floor = place_meeting(x, y+yvel+1, objSolid2) or place_meeting (x, y+yvel+1, objTopSolid);

if KEY_RIGHT &amp;&amp; !collision_right_wall &amp;&amp; ducking == false &amp;&amp; canMove == true &amp;&amp; !backdashing &amp;&amp; sprite_index != sprShantaeHit
{
    if running == false
        vel = 2;
    else if running == true
        vel = 3.25;
}
else if KEY_LEFT &amp;&amp; !collision_left_wall &amp;&amp; ducking == false &amp;&amp; canMove == true &amp;&amp; !backdashing &amp;&amp; sprite_index != sprShantaeHit
{
    if running == false
        vel = -2;
    else if running == true
        vel = -3.25;
}
else if (!KEY_LEFT &amp;&amp; !KEY_RIGHT &amp;&amp; !backdashing) or canMove == false or gunshoot or sprite_index == sprShantaeHit
{
    vel = 0;
    crawling = false;
}
if sprite_index == sprShantaeBackdash
{
    vel = (3*-image_xscale);
}

//if (scrCollideSensorRightS(obstacle_layer | high_layer | low_layer,MaskExtraLarge) &amp;&amp; vel&gt;0) vel=0;
//if (scrCollideSensorLeftS(obstacle_layer | high_layer | low_layer,MaskExtraLarge) &amp;&amp; vel&lt;0) vel=0;

if inMaw
{
    x += mhsp;
    y += mvsp;
}
else
{
    x += (vel+hsp);
    y += (vsp+yvel);
}

if KEY_RIGHT &amp;&amp; !collision_right_wall &amp;&amp; ducking == true &amp;&amp; whipping == false &amp;&amp; canMove == true  &amp;&amp; sprite_index != sprShantaeHit
{
    vel = 1;
    crawling = true;
}
else if KEY_LEFT &amp;&amp; !collision_left_wall &amp;&amp; ducking == true &amp;&amp; whipping == false &amp;&amp; canMove == true  &amp;&amp; sprite_index != sprShantaeHit
{
    vel = -1;
    crawling = true;
}

if collision_ceil &amp;&amp; !collision_floor &amp;&amp; yvel &lt; 0
{
    yvel = 0;
    ground = false;
}

if (collision_left_wall &amp;&amp; vel &lt; 0) or (collision_right_wall &amp;&amp; vel &gt; 0)
   vel = 0;

scrCollideSlopes2();

if x &lt; 3
    x = 3;
if x &gt; room_width - 3
    x = room_width - 3;
if y &lt; -5
    y = -5;
    
if inMaw &amp;&amp; mawshoot &amp;&amp; place_meeting (x, y+1, objSolid2)
{
    other.cangrabplayer = true;
    inMaw = false;
    mawshoot = false;
    canMove = true;
    mhsp = 0;
    mvsp = 0;
    yvel = 0;
    vel = 0;
}
if inMaw &amp;&amp; mawshoot &amp;&amp; place_meeting (x, y+mvsp-1, objSolid2)
{
    other.cangrabplayer = true;
    inMaw = false;
    mawshoot = false;
    canMove = true;
    mhsp = 0;
    mvsp = 0;
    yvel = 0;
    vel = 0;
}
if inMaw &amp;&amp; mawshoot &amp;&amp; place_meeting (x+1, y, objSolid2)
{
    other.cangrabplayer = true;
    inMaw = false;
    mawshoot = false;
    canMove = true;
    mhsp = 0;
    mvsp = 0;
    vsp = 0;
    vel = 0;
}
if inMaw &amp;&amp; mawshoot &amp;&amp; place_meeting (x+mhsp-1, y, objSolid2)
{
    other.cangrabplayer = true;
    inMaw = false;
    mawshoot = false;
    canMove = true;
    mhsp = 0;
    mvsp = 0;
    vsp = 0;
    vel = 0;
}

if sprite_index == sprShantaeRun
    steptimer -= 1;
    
if !inMaw
{
    if collision_floor &amp;&amp; yvel &gt;= 0
    {
        ground = true;
        yfr = 0;
    }
    else
    {
        ground = false;
        yfr = 0.25;
    }
    yvel += yfr;
}
else
{
    yvel = 0;
    yfr = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with a wall
//Allows the player to collide with walls

//Floor
var myWall = instance_place(x, y+yvel+1, objSolid2);
if myWall &gt;= 0 &amp;&amp; yvel &gt; 0
{
    y = myWall.y - (sprite_get_height(mask_index) - sprite_get_yoffset(mask_index));
    ground = true;
    yvel = 0;

    //Note: there used to be a system here that set MM's sprite to the walking sprite when landing
    //However, due to complications such as climbing up ladders, it was a lot of work for such a minor feature
    //Therefore, it has been removed
}


//Wall
myWall = instance_place(x+vel, y, objSolid2);
if myWall &gt;= 0 &amp;&amp; vel != 0
{
    if vel &lt; 0
    {
        x = myWall.bbox_right + sprite_get_xoffset(mask_index) - sprite_get_bbox_left(mask_index);
        
        //For some reason, the code above would work correctly half the time, but clip MM inside the wall the other half
        //This while-loop fixes the issue by forcing MM out of the wall
        while place_meeting(x, y, myWall)
            x += 1;
    }
    else
        x = myWall.x - (sprite_get_width(mask_index) - sprite_get_xoffset(mask_index)) + (sprite_get_width(mask_index) - sprite_get_bbox_right(mask_index)) - 1;
        
    vel = 0;
}


//Ceiling
myWall = instance_place(x, y+yvel, objSolid2);
if myWall &gt;= 0 &amp;&amp; yvel &lt; 0
{
    y = myWall.bbox_bottom + sprite_get_yoffset(mask_index);
    
    //For some reason, the code above would work correctly half the time, but clip MM inside the ceiling the other half
    //This while-loop fixes the issue by forcing MM out of the ceiling
    while place_meeting(x, y, myWall)
        y += 1;
        
    yvel = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gravity
if !inMaw
{
    /*if ((collision_floor &amp;&amp; yvel &gt;= 0) or (place_meeting (x, y+yvel+1, objTopSolid) &amp;&amp; yvel &gt;= 0) or (place_meeting (x, y+yvel+1, objMovingPlatform) &amp;&amp; yvel &gt;= 0) or (place_meeting (x, y+yvel+1, objJumpThrough) &amp;&amp; layer == 1 &amp;&amp; yvel &gt;= 0)) &amp;&amp; sprite_index != sprShantaeHit
    {
        ground = true;
        yfr = 0;
    }
    else
    {
        ground = false;
        yfr = 0.25;
    }*/
    
    if !gliding &amp;&amp; !striking
    {
        if yvel &gt; 8
            yvel = 8;
    }
    else if gliding
    {
        if yvel &gt; 1
            yvel = 1;
    }
}

if ground &amp;&amp; (striking or gliding)
{
    striking = false;
    gliding = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Running and Jumping

//Running
if keyboard_check (ord("X")) &amp;&amp; ducking == false
    running = true;
else
    running = true;
    
//Jumping
if ground == true &amp;&amp; canMove == true &amp;&amp; sprite_index != sprShantaeHit &amp;&amp; keyboard_check_pressed (ord("Z"))
{
    if place_meeting (x, y+yvel+1, objTopSolid) &amp;&amp; !place_meeting (x, y, objPlatformBlank) &amp;&amp; !place_meeting (x, y, objPlatformSwitch &amp;&amp; !place_meeting (x, y, objPlatformSpike) &amp;&amp; !place_meeting (x, y, objPlatformNoSpike))
    {
        if vel == 0 &amp;&amp; KEY_DOWN
        {
            /*ground = false;
            if instance_exists (objTopSolid)
            {
                with objTopSolid
                {
                    instance_change (objNoTopSolid, true);
                }   
            }*/
        }
        else
        {
            yvel = -7;
            audio_play_sound (sndShantaeHa, 10, false);
        }
    }
    else
    {
        yvel = -7;
        audio_play_sound (sndShantaeHa, 10, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite handling

if sprite_index == sprShantaeDance
   image_speed = 0.16;
else
    image_speed = 0.33;

if ground == true &amp;&amp; whipping == false &amp;&amp; canMove == true &amp;&amp; fireball == false &amp;&amp; gunshoot == false &amp;&amp; !striking &amp;&amp; !gliding &amp;&amp; !backdashing &amp;&amp; sprite_index != sprShantaeHit
{
    if vel == 0 &amp;&amp; ducking == false &amp;&amp; danceTimer == 0
        sprite_index = sprShantaeStand;
    else if vel != 0 &amp;&amp; running == false
        sprite_index = sprShantaeWalk;
    else if vel != 0 &amp;&amp; ducking == true &amp;&amp; crawling == true
        sprite_index = sprShantaeCrawl;
    else if vel != 0 &amp;&amp; running == true
        sprite_index = sprShantaeRun;
}
else if canMove == false &amp;&amp; !place_meeting (x, y, objSkyTalk) &amp;&amp; image_alpha != 1
    sprite_index = sprShantaeHit;
else if fireball == true &amp;&amp; sprite_index != sprShantaeHit
{
     sprite_index = sprShantaeShoot;
     canMove = false;
     vel = 0;
}
else if gunshoot == true &amp;&amp; sprite_index != sprShantaeHit
{
    if ground
    {
        sprite_index = sprShantaeShootGunG;
        canMove = false;
        vel = 0;
    }
    else
    {
        sprite_index = sprShantaeShootGunA;
        canMove = false;
        vel = 0;
    }
}
else if backdashing &amp;&amp; sprite_index != sprShantaeHit
{
    sprite_index = sprShantaeBackdash;
    canMove = false;
}
else if sprite_index == sprShantaeHit
{

}

if ground == false &amp;&amp; sprite_index != sprShantaeHit
{
    if !gunshoot &amp;&amp; !whipping &amp;&amp; !gliding &amp;&amp; !striking
    {
        if (yvel &lt; 0 &amp;&amp; inMaw == false) or (mvsp &lt; 0 &amp;&amp; inMaw == true)
            sprite_index = sprShantaeJump;
        else if (yvel &gt;= 0 &amp;&amp; inMaw == false) or (mvsp &gt;= 0 &amp;&amp; inMaw == true)
            sprite_index = sprShantaeFall;
    }
    else if gunshoot &amp;&amp; !whipping &amp;&amp; !gliding &amp;&amp; !striking
        sprite_index = sprShantaeShootGunA;
    else if whipping &amp;&amp; !gliding &amp;&amp; !striking &amp;&amp; !gunshoot
         sprite_index = sprShantaeJumpWhip;
    else if striking &amp;&amp; !gliding &amp;&amp; !whipping &amp;&amp; !gunshoot
        sprite_index = sprShantaeStrike;
    else if gliding &amp;&amp; !striking &amp;&amp; !whipping &amp;&amp; !gunshoot
    {
        sprite_index = sprShantaeGlide;
        
        if image_index &gt; 14 &amp;&amp; gliding
            image_index = 5;
    }
}

if (vel &lt; 0 &amp;&amp; !backdashing) or (vel &gt; 0 &amp;&amp; backdashing)
    image_xscale = -1;
else if (vel &gt; 0 &amp;&amp; !backdashing) or (vel &lt; 0 &amp;&amp; backdashing)
    image_xscale = 1;

if sprite_index == sprShantaeFall &amp;&amp; image_index &gt; 7
    image_index = 4;

if ducking == true &amp;&amp; ground == false &amp;&amp; !gliding &amp;&amp; !striking &amp;&amp; !gunshoot &amp;&amp; !whipping &amp;&amp; yvel &lt; 0 &amp;&amp; sprite_index != sprShantaeHit
{
    sprite_index = sprShantaeJump;
    ducking = false;
    crawling = false;
}
if ducking == true &amp;&amp; ground == false &amp;&amp; !gliding &amp;&amp; !striking &amp;&amp; !gunshoot &amp;&amp; yvel &gt;= 0 &amp;&amp; sprite_index != sprShantaeHit
{
    sprite_index = sprShantaeFall;
    ducking = false;
    crawling = false;
}

if (sprite_index == sprShantaeShootGunG or sprite_index == sprShantaeShootGunA) &amp;&amp; image_index &gt; 5 &amp;&amp; sprite_index != sprShantaeHit
{
    gunshoot = false;
    canMove = true;
    sprite_index = sprShantaeStand;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ducking

if vel == 0 &amp;&amp; ground == true &amp;&amp; KEY_DOWN &amp;&amp; canMove == true &amp;&amp; sprite_index != sprShantaeHit
{
    ducking = true;
    mask_index = mskShantaeDuck;
    sprite_index = sprShantaeDuck;
    
    if image_index &gt; 16
        image_index = 7;
}
else if !KEY_DOWN
{
    ducking = false;
    mask_index = mskShantae;
}

if ducking == true &amp;&amp; vel == 0 &amp;&amp; whipping == false
    sprite_index = sprShantaeDuck;
else if ducking == true &amp;&amp; vel == 0 &amp;&amp; whipping == true
    sprite_index = sprShantaeDuckWhip;
else if ducking == true &amp;&amp; vel != 0
    sprite_index = sprShantaeCrawl;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hair whipping

if keyboard_check_pressed (ord("X")) &amp;&amp; whipping == false &amp;&amp; canMove == true &amp;&amp; sprite_index != sprShantaeHit
{
    whipping = true;
    audio_play_sound (sndHairWhip, 10, false);
    audio_play_sound (sndShantaeHa, 10, false);
    alarm[0] = 25;
    image_speed = 0.33;
    
    if ground
    {
       //vel = 0;
       canMove = false;
    }
    else
    {
        //Diddly squad xd
        canMove = true;
    }
    
    if ground
    {
        if ducking == false
            sprite_index = sprShantaeStandWhip;
        else
            sprite_index = sprShantaeDuckWhip;
    }
    else
        sprite_index = sprShantaeJumpWhip;
}

if whipping == true &amp;&amp; image_index &gt;= 7
{
    whipping = false;
    canMove = true;
    
    if ground
             sprite_index = sprShantaeStand;
    else
        sprite_index = sprShantaeJump;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hitbox creating

if sprite_index == sprShantaeStandWhip
{
    if image_index &gt; 3 &amp;&amp; image_index &lt; 5
    {        
        with instance_create (x, y, objShantaeStandWhipBox)
        {
            image_xscale = other.image_xscale;
        }
    }
}
else if sprite_index == sprShantaeDuckWhip
{
    if image_index &gt;= 3 &amp;&amp; image_index &lt;= 5
    {
        with instance_create (x, y, objShantaeDuckWhipBox)
        {
            image_xscale = other.image_xscale;
        }
    }
}
else if sprite_index == sprShantaeJumpWhip
{
    if image_index &gt;= 3 &amp;&amp; image_index &lt;= 5
    {
        with instance_create (x, y, objShantaeJumpWhipBox)
        {
            image_xscale = other.image_xscale;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enter doors

if place_meeting (x, y, objDungeonDoor) &amp;&amp; KEY_UP &amp;&amp; canMove == true &amp;&amp; vel == 0
{
    canMove = false;
    x = objDungeonDoor.x;
    alarm[6] = 40;
    instance_create (0, 0, objFade);
}
else if place_meeting (x, y, objMiniDoor) &amp;&amp; KEY_UP &amp;&amp; canMove == true &amp;&amp; vel == 0
{
    canMove = false;
    x = objMiniDoor.x;
    alarm[6] = 40;
    instance_create (0, 0, objFade);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision with a moving platform
var platformID; //This is only a temporary variable, this checks for a particular platform
platformID = (instance_place (x, y+1, objMovingPlatform));
//vplatformID = (instance_place (x, y+1, objMovingPlatformV));

if platformID != noone
{
    hsp = platformID.hsp;
    vsp = platformID.vsp;
}
else
{
    hsp = 0;
    vsp = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jumping through platforms

//This allows the player to jump through platforms from the bottom, and land on the top.
/*This is connected to the low layer, so we need to set the layers accordingly depending on
the player's position*/

if collision_circle (x, y-30, 30, objJumpThrough, 1, 1) &amp;&amp; yvel &lt; 0
{
    layer = 0;
}

if collision_circle (x, y+30, 30, objJumpThrough, 1, 1) &amp;&amp; !collision_circle (x, y, 13, objJumpThrough, 1, 1) &amp;&amp; yvel &gt; 0
{
    layer = 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Priate hat glide
//Hold the Z key when moving downward

if keyboard_check (ord("Z")) &amp;&amp; !ground &amp;&amp; yvel &gt;= 0 &amp;&amp; sprite_index != sprShantaeHit
{
    gliding = true;
}
else
{
    gliding = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play stepping SFX
steptimer -= 1;

if ground &amp;&amp; sprite_index == sprShantaeRun &amp;&amp; ((image_index &gt; 2 &amp;&amp; image_index &lt; 3) or (image_index &gt; 9 &amp;&amp; image_index &lt; 10)) &amp;&amp; steptimer &lt;= 0
{
    audio_play_sound (soundstep, 10, false);
    steptimer = 10;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle timers, items and after images
if monstermilk_timer &gt; 0 monstermilk_timer -= 1;
if super_monstermilk_timer &gt; 0 super_monstermilk_timer -= 1;
    
if monstermilk_timer &lt;= 0 &amp;&amp; super_monstermilk_timer &lt;= 0
    attackStrength = attackStrengthDefault;
else if monstermilk_timer &gt; 0 &amp;&amp; super_monstermilk_timer &lt;= 0
    attackStrength = (attackStrengthDefault*2);
else if monstermilk_timer &lt;= 0 &amp;&amp; super_monstermilk_timer &gt; 0
    attackStrength = (attackStrengthDefault*3);
    
aftertimer0 -= 1;
aftertimer1 -= 1;
aftertimer2 -= 1;

//After images
if aftertimer0 &lt;= 0
{
    xold0 = x;
    yold0 = y;
    spriteold0 = sprite_index;
    imageold0 = image_index;
    xscaleold0 = image_xscale;
    aftertimer0 = 5;
}
if aftertimer1 &lt;= 0
{
    xold1 = x;
    yold1 = y;
    spriteold1 = sprite_index;
    imageold1 = image_index;
    xscaleold1 = image_xscale;
    aftertimer1 = 3;
}
if aftertimer2 &lt;= 0
{
    xold2 = x;
    yold2 = y;
    spriteold2 = sprite_index;
    imageold2 = image_index;
    xscaleold2 = image_xscale;
    aftertimer2 = 1;
}

/*if hsp == 0 &amp;&amp; vsp == 0 &amp;&amp; vel == 0 &amp;&amp; vspeed == 0
{
    xold0 = x;
    xold1 = x;
    xold2 = x;
    yold0 = y;
    yold1 = y;
    yold2 = y;
    spriteold0 = sprite_index;
    spriteold1 = sprite_index;
    spriteold2 = sprite_index;
    imageold0 = image_index;
    imageold1 = image_index;
    imageold2 = image_index;
    xscaleold0 = image_xscale;
    xscaleold1 = image_xscale;
    xscaleold2 = image_xscale;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objMerchant">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed (vk_space) &amp;&amp; canMove == true
{
    instance_create (0, 0, objFade);
    alarm[5] = 40;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objMiner">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed (vk_space) &amp;&amp; canMove == true
{
    canMove = false;
    
    instance_create (view_xview[0], view_yview[0]+144, objQuestionText);
    instance_create (view_xview[0]+112, view_yview[0]+176, objModel);
    
    with objModel sprite_index = sprNoModel;
    
    with objQuestionText
    {
        if global.dialogue1 == false
         txt = "Oh, hey there!"
        
        if keyboard_check_pressed (ord("Z")) &amp;&amp; canPressZ == true
        {
            instance_change (objCutsceneText, true);
            with objCutsceneText
            {
                maxtext = 10;
                myRoom = room;
                if txtline == 0 &amp;&amp; room == rmS2rm4
                {
                    txt = "I wasn't expecting to see#you anytime soon!";
                    with objModel sprite_index = sprNoModel;
                }
                if txtline == 1 &amp;&amp; room == rmS2rm4
                {
                    txt = "But anyway, let's get to the#point here.";
                    with objModel sprite_index = sprNoModel;
                }
                if txtline == 2 &amp;&amp; room == rmS2rm4
                {
                    txt = "You see this rock next to me?";
                    with objModel sprite_index = sprNoModel;
                }
                if txtline == 3 &amp;&amp; room == rmS2rm4
                {
                    txt = "On that rock is a ring indent.";
                    with objModel sprite_index = sprNoModel;
                }
                if txtline == 4 &amp;&amp; room == rmS2rm4
                {
                    txt = "You must find the ring that is#hidden somewhere on this island...";
                    with objModel sprite_index = sprNoModel;
                }
                if txtline == 5 &amp;&amp; room == rmS2rm4
                {
                    txt = "...then come back here and place#the ring into this rock.";
                    with objModel sprite_index = sprNoModel;
                }
                if txtline == 6 &amp;&amp; room == rmS2rm4
                {
                    txt = "This will then open up a hidden gate.";
                    with objModel sprite_index = sprNoModel;
                }
                if txtline == 7 &amp;&amp; room == rmS2rm4
                {
                    txt = "Once you have done that, find my#tablet and bring it back to me.";
                    with objModel sprite_index = sprNoModel;
                }
                if txtline == 8 &amp;&amp; room == rmS2rm4
                {
                    txt = "It is hidden somewhere on this island.";
                    with objModel sprite_index = sprNoModel;
                }
                if txtline == 9 &amp;&amp; room == rmS2rm4
                {
                    txt = "Understand?";
                    with objModel sprite_index = sprNoModel;
                }
                if txtline == 10 &amp;&amp; room == rmS2rm4
                {
                    txt = "Okay, now get going!";
                    with objModel sprite_index = sprNoModel;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objTwitchTalk">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed (vk_space) &amp;&amp; canMove == true
{
    canMove = false;
    
    instance_create (view_xview[0], view_yview[0]+144, objQuestionText);
    instance_create (view_xview[0]+112, view_yview[0]+176, objModel);
    
    with objModel sprite_index = sprTwitchModel;
    
    with objQuestionText
    {
        if global.dialogue0 == false
         txt = "Hey you, girlfriend! Could you please turn#the heat up? It's a little cold in here."
        
        if keyboard_check_pressed (ord("Z")) &amp;&amp; canPressZ == true
        {
            instance_change (objCutsceneText, true);
            with objCutsceneText
            {
                maxtext = 2;
                myRoom = room;
                if txtline == 0 &amp;&amp; room == rmS2rm8
                {
                    txt = "Yeah, please do it for us!";
                    with objModel sprite_index = sprVinegarModel;
                }
                if txtline == 1 &amp;&amp; room == rmS2rm8
                {
                    txt = "I'm not sure how to, but...";
                    with objModel sprite_index = sprShantaeModel6;
                }
                if txtline == 2 &amp;&amp; room == rmS2rm8
                {
                    txt = "Okay then, if you say so.#I'll be back in no time!";
                    with objModel sprite_index = sprShantaeModel4;
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSkyTalk">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if keyboard_check_pressed (vk_space) &amp;&amp; canMove == true
{
    canMove = false;
    
    instance_create (view_xview[0], view_yview[0]+144, objQuestionText);
    instance_create (view_xview[0]+112, view_yview[0]+176, objModel);
    
    with objModel sprite_index = sprSkyModel2;
    
    with objQuestionText
    {
        if global.controltype == 0
         txt = "Are we ready to leave?#(Press Z to accept, press X to decline.)"
        if global.controltype == 1
         txt = "Are we ready to leave?#(Press A to accept, press B to decline.)"
        if global.controltype == 2
         txt = "Are we ready to leave?#(Press Cross to accept, press Circle to decline.)"
        
        if keyboard_check_pressed (ord("X"))
        {
            instance_destroy();
            with objModel instance_destroy();
            with objShantae
            {
                canMove = true;
            }
        }
        else if keyboard_check_pressed (ord("Z")) &amp;&amp; canPressZ == true
        {
            instance_change (objCutsceneText, true);
            with objCutsceneText
            {
                maxtext = 0;
                myRoom = room;
                if txtline == 0 &amp;&amp; room == rmShantaeHub1
                {
                    txt = "Okay then, we're off!";
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objTalkParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !instance_exists (objSpace)
   instance_create (x-24, y-50, objSpace);
else
    with objSpace instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objCage">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*//Collision with a moving platform
var platformID; //This is only a temporary variable, this checks for a particular platform
platformID = (instance_place (x, y+1, objMovingPlatform));

if platformID != noone
{
    hsp = platformID.hsp;
    vsp = platformID.vsp;
}
else
{
    hsp = 0;
    vsp = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objMawRed">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.cangrabplayer == true
{
    inMaw = true;
    
    mawshoot = false;
    yfr = 0;
    vel = 0;
    yvel = 0;
    
    if mawshoot == false
    {
        x = other.x;
        y = other.y;
        yvel = 0;
        vel = 0;
        mhsp = 0;
        mvsp = 0;
        sprite_index = sprite651;
    }
}

if other.grabbed == false
{
    mawshoot = true;
    
    var mawID;
    mawID = instance_place (x, y, objMawRed);
    
    if mawID.setdir == "hor"
    {
        mhsp = 6.5*mawID.scl;
        mvsp = 0;
        image_xscale = mawID.scl;
    }
    else if mawID.setdir == "ver"
    {
        mhsp = 0;
        mvsp = 6.5*mawID.scl;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objMawGreen">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.cangrabplayer == true
{
    inMaw = true;
    
    if ((vel != 0 or yvel != 0) &amp;&amp; !inMaw) or ((mhsp != 0 or mvsp != 0) &amp;&amp; inMaw)
    {
        mawshoot = false;
        yfr = 0;
        vel = 0;
        yvel = 0;
        
        if mawshoot == false
        {
            x = other.x;
            y = other.y;
            yvel = 0;
            vel = 0;
            mhsp = 0;
            mvsp = 0;
            sprite_index = sprite651;
        }
    }
}
 
if KEY_LEFT &amp;&amp; other.cangrabplayer == true &amp;&amp; inMaw == true &amp;&amp; !mawshoot &amp;&amp; x == other.x &amp;&amp; y == other.y 
{
    mawshoot = true;
    other.cangrabplayer = false;
    mvsp = 0;
    mhsp = -6.5;
    sprite_index = sprShantaeJump;
    image_xscale = -1;
}
if KEY_RIGHT &amp;&amp; other.cangrabplayer == true &amp;&amp; inMaw == true &amp;&amp; !mawshoot &amp;&amp; x == other.x &amp;&amp; y == other.y
{
    mawshoot = true;
    other.cangrabplayer = false;
    mvsp = 0;
    mhsp = 6.5;
    sprite_index = sprShantaeJump;
    image_xscale = 1;
}
if KEY_UP &amp;&amp; other.cangrabplayer == true &amp;&amp; inMaw == true &amp;&amp; !mawshoot &amp;&amp; x == other.x &amp;&amp; y == other.y
{
    mawshoot = true;
    other.cangrabplayer = false;
    mvsp = -6.5;
    mhsp = 0;
    sprite_index = sprShantaeJump;
}
if KEY_DOWN &amp;&amp; other.cangrabplayer == true &amp;&amp; inMaw == true &amp;&amp; !mawshoot &amp;&amp; x == other.x &amp;&amp; y == other.y
{
    mawshoot = true;
    other.cangrabplayer = false;
    mvsp = 6.5;
    mhsp = 0;
    sprite_index = sprShantaeFall;
}

if inMaw canMove = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPit">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.hearts = 0;
instance_change (objShantaeHitDie, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPassDoor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if other.solid == true
{
    move_contact_solid (direction, 0.01);
    vspeed = 0;
}
else
{
    //Nothing
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objDragonHeadLeft">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*move_contact_solid (direction, 12);
vspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objDragonHeadRight">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*move_contact_solid (direction, 12);
vspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSlopeParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrCollideSlopes2();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Activate the dance moves

//There are three basic checks in this simple dance system:

/*First, we check to see if we are standing and if we have at least one dance move learnt
(in this case, the monkey dance or whatever is desired) and we are ready*/
if global.monkeyLearnt == true &amp;&amp; sprite_index == sprShantaeStand &amp;&amp; danceTimer &gt;= 60 &amp;&amp; itemselection == 0 &amp;&amp; vel == 0
{
    //If so, change into the dance sprite_index. Additionally, disallow any form of movement
    dancemove = 1;
    canMove = false;
    sprite_index = sprShantaeDance;
}
else
{
    //If we don't have any dances, do nothing. Allow movement again.
    canMove = true;
}

//Before we can start dancing, we need to activate it by holding down the button
if sprite_index == sprShantaeStand &amp;&amp; itemselection == 0 &amp;&amp; global.monkeyLearnt == true
{
    danceTimer += 1;
    
    if danceTimer &gt; 60
       danceTimer = 60;
}

if danceTimer &gt; 0
   canMove = false;
else
    canMove = true;
   
with objMusicDanceHUD
{
    if instance_exists (objShantae) &amp;&amp; objShantae.danceTimer &lt; 60
     image_index = (objShantae.danceTimer/10);
}

/*Depending on the dance moves we have learnt, if we get to a dance we have not yet
learnt, we set the frame to equal 0 again, cycling back to the first dance we have.*/

//The dance system here is identical to the one that was implemented in Risky's Revenge.

if (global.monkeyLearnt == true &amp;&amp; global.elephantLearnt == false &amp;&amp; global.harpyLearnt == false) or (danceTimer &gt; 0 &amp;&amp; danceTimer &lt; 60)
{
    if image_index &gt; 15
       image_index = 0;
}
if global.monkeyLearnt == true &amp;&amp; global.elephantLearnt == true &amp;&amp; global.harpyLearnt == false
{
    if image_index &gt; 31
       image_index = 0;
}
if global.monkeyLearnt == true &amp;&amp; global.elephantLearnt == true &amp;&amp; global.harpyLearnt == true
{
    if image_index &gt; 47
       image_index = 0;
}

/*Our final check - depending on the frame, we need to set the dancemove variable to
whatever is appropriate, e.g. when the frames pass the first dance move, the variable is
set to 2, and so on until it goes back to the beginning, in which case it is set back to 
1.*/

//Here is how it goes:

if sprite_index == sprShantaeDance //Again, check to see if we are already dancing
{ 
  if (image_index &gt;= 0 &amp;&amp; image_index &lt;= 15) //0-15 is the first dance
  {
    dancemove = 1;
  }
  else if (image_index &gt;= 16 &amp;&amp; image_index &lt;= 31) //16-31 is the second dance
  {
    dancemove = 2;
  }
  else if (image_index &gt;= 32 &amp;&amp; image_index &lt;= 47) //32-47 is the third dance
  {
    dancemove = 3;
  }
}

//Fireball charge shot, allows player to shoot 3 fireballs at once
if itemselection == 9 &amp;&amp; global.fireballs &gt;= 3
{
    firechargeTimer += 1;
    canMove = false;
    
    if firechargeTimer &gt;= 60
        firechargeTimer = 60;
        
    //The rest of the code is in the C-Key Released event.
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index == sprShantaeShoot
   image_index = 6;
   
if sprite_index == sprShantaeBackdash
{
    backdashing = false;
    vel = 0;
    canMove = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create (0, 0, objLivesCounter2);
instance_create (0, 0, objLives);
instance_create (0, 0, objHeartCounter);
instance_create (0, 0, objGems);
instance_create (0, 0, objGemCounter);
instance_create (0, 0, objMusicDanceHUD);
instance_create (0, 0, objBarDanceHUD);
instance_create (0, 0, objItemHUD);

//if room == rmShantaeHub1 or room == rmShantaeHub2
   instance_create (0, 0, objTime2);

if !instance_exists (objTimeControl)
   global.damaged = false;
   
if global.playerspawnx == -1 &amp;&amp; global.playerspawny == -1
{
    global.playerspawnx = x;
    global.playerspawny = y;
}

x = global.playerspawnx;
y = global.playerspawny;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if y &gt; room_height
{
    global.hearts = 0;
    instance_change (objShantaeHitDie, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_index != sprite_old
{
    image_index = 0;
    sprite_old = sprite_index;
}

if monstermilk_timer &gt; 0 &amp;&amp; super_monstermilk_timer &lt;= 0
{
    draw_sprite_ext (spriteold0, imageold0, xold0, yold0, xscaleold0, 1, 0, make_colour_rgb (254, 109, 109), 1);
    draw_sprite_ext (spriteold1, imageold1, xold1, yold1, xscaleold1, 1, 0, make_colour_rgb (254, 109, 109), 1);
    draw_sprite_ext (spriteold2, imageold2, xold2, yold2, xscaleold2, 1, 0, make_colour_rgb (254, 109, 109), 1);
}
if monstermilk_timer &lt;= 0 &amp;&amp; super_monstermilk_timer &gt; 0
{
    draw_sprite_ext (spriteold0, imageold0, xold0, yold0, xscaleold0, 1, 0, make_colour_rgb (52, 205, 237), 1);
    draw_sprite_ext (spriteold1, imageold1, xold1, yold1, xscaleold1, 1, 0, make_colour_rgb (52, 205, 237), 1);
    draw_sprite_ext (spriteold2, imageold2, xold2, yold2, xscaleold2, 1, 0, make_colour_rgb (52, 205, 237), 1);
}

//draw_text (view_xview[0]+240, view_yview[0], collision_left_wall);
//draw_text (view_xview[0]+240, view_yview[0]+40, collision_right_wall);
if !canGetHit
    draw_sprite_ext (sprite_index, image_index, round(x), round(y), image_xscale, 1, 0, c_white, 0.5);
else if sprite_index != sprShantaeHit
    draw_sprite_ext (sprite_index, image_index, round(x), round(y), image_xscale, 1, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if danceTimer &lt; 60
{
    instance_create (x-20, y-80, objInventoryBarSmall);
    itemselection += 1;
    
    if itemselection == 1 &amp;&amp; global.halfpotions == 0
       itemselection = 2;
    if itemselection == 2 &amp;&amp; global.fullpotions == 0
       itemselection = 3;
    if itemselection == 3 &amp;&amp; global.autopotions == 0
       itemselection = 4;
    if itemselection == 4 &amp;&amp; global.monstermilk == 0
       itemselection = 5;
    if itemselection == 5 &amp;&amp; global.super_monstermilk == 0
       itemselection = 6;
    if itemselection == 6 &amp;&amp; global.pikeballs == 0
       itemselection = 7;
    if itemselection == 7 &amp;&amp; global.superpikeballs == 0
       itemselection = 8;
    if itemselection == 8 &amp;&amp; global.bubbleshields == 0
       itemselection = 9;
    if itemselection == 9 &amp;&amp; global.fireballs == 0
       itemselection = 10;
    if itemselection == 10 &amp;&amp; !global.pirategun
       itemselection = 11;
    if itemselection == 11 &amp;&amp; global.keys == 0
       itemselection = 0;
}

if itemselection &gt; itemselectionmax
   itemselection = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Use the items that we have currently selected

/*The items are selected by using the A/D keys. When we get to a specific item, use the
appropriate one, depending on what exactly was being selected.*/

//Here's how it goes.

if itemselection != 0 //&amp;&amp; sprite_index != sprShantaeHit
{
    switch itemselection
    {
        case 1:
             if global.halfpotions &gt; 0
             {
                 global.halfpotions -= 1;
                 global.hearts += 4;
                 audio_play_sound (sndHeart, 10, false);
             }
        break;
        case 2:
             if global.fullpotions &gt; 0
             {
                 global.fullpotions -= 1;
                 global.hearts = global.maxHearts;
                 audio_play_sound (sndHeart, 10, false);
             }
        break;
        case 3:
             if global.autopotions &gt; 0
             {
                 global.autopotions -= 1;
                 global.hearts = global.maxHearts;
                 audio_play_sound (sndHeart, 10, false);
             }
        break;
        case 4:
            if monstermilk_timer &lt;= 0 &amp;&amp; super_monstermilk_timer &lt;= 0 &amp;&amp; global.monstermilk &gt; 0
            {
                global.monstermilk -= 1;
                monstermilk_timer = 900;
                audio_play_sound (sndHeart, 10, false);
                audio_play_sound (sndShield, 10, false);
            }
        break;
        case 5:
            if monstermilk_timer &lt;= 0 &amp;&amp; super_monstermilk_timer &lt;= 0 &amp;&amp; global.monstermilk &gt; 0
            {
                global.super_monstermilk -= 1;
                super_monstermilk_timer = 900;
                audio_play_sound (sndHeart, 10, false);
                audio_play_sound (sndShield, 10, false);
            }
        break;
        case 6:
             if !instance_exists (objPikeBall) &amp;&amp; !instance_exists (objSuperPikeBall) &amp;&amp; global.pikeballs &gt; 0
             {
                 global.pikeballs -= 1;
                 instance_create (x, y, objPikeBall);
                 audio_play_sound (sndShield, 10, false);
             }
        break;
        case 7:
             if !instance_exists (objPikeBall) &amp;&amp; !instance_exists (objSuperPikeBall) &amp;&amp; global.superpikeballs &gt; 0
             {
                 global.superpikeballs -= 1;
                 instance_create (x, y, objSuperPikeBall);
                 audio_play_sound (sndShield, 10, false);
             }
        break;
        case 8:
            if !instance_exists (objBubbleshield) &amp;&amp; global.bubbleshields &gt; 0
             {
                 global.bubbleshields -= 1;
                 instance_create (x, y, objBubbleshield);
                 audio_play_sound (sndShield, 10, false);
             }
        break;
        case 9:
             if !instance_exists (objFireball) &amp;&amp; global.fireballs &gt; 0 &amp;&amp; ground == true &amp;&amp; fireball == false
             {
                fireball = true;
                global.fireballs -= 1;
                instance_create (x, y, objFireball);
                audio_play_sound (sndShantaeUseFire, 10, false);
                alarm[7] = 45;
             }
        break;
        case 10:
             if vel == 0 &amp;&amp; global.pirategun != false &amp;&amp; !gunshoot &amp;&amp; (instance_number (objBulletGun) &lt; 2)
             {
                gunshoot = true;
                instance_create (x, y, objBulletGun);
             }
        break;
        case 11:
             /*if place_meeting (x, y, objRingCarve) &amp;&amp; global.ringItem &gt; 0
             {
                global.ringItem = 2;
                with objRingCarve image_index = 1;
                global.dialogue1 = true;
             }*/
             if place_meeting (x, y, objDungeonDoorLocked) &amp;&amp; global.keys &gt; 0
             {
                global.keys -= 1;
                with objDungeonDoorLocked instance_change (objDungeonDoor, true);
             }
             else if place_meeting (x, y, objMiniDoorLocked) &amp;&amp; global.keys &gt; 0
             {
                global.keys -= 1;
                with objMiniDoorLocked instance_change (objMiniDoor, true);
             }
        break;
    }
}

//Strike downward attack (cannot have any items selected)
if itemselection == 0 &amp;&amp; !ground &amp;&amp; !striking &amp;&amp; yvel &gt;= 0 &amp;&amp; sprite_index != sprShantaeHit
{
    striking = true;
    yvel = 14;
}
//Backdash (cannot have any items selected)
if itemselection == 0 &amp;&amp; ground &amp;&amp; vel != 0 &amp;&amp; !backdashing &amp;&amp; sprite_index != sprShantaeHit
{
    backdashing = true;
    vel = (3*-image_xscale);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if danceTimer &lt; 60
{
    instance_create (x-20, y-80, objInventoryBarSmall);
    itemselection -= 1;
    
    if itemselection == 1 &amp;&amp; global.halfpotions == 0
       itemselection = 0;
    if itemselection == 2 &amp;&amp; global.fullpotions == 0
       itemselection = 1;
    if itemselection == 3 &amp;&amp; global.autopotions == 0
       itemselection = 2;
    if itemselection == 4 &amp;&amp; global.monstermilk == 0
       itemselection = 3;
    if itemselection == 5 &amp;&amp; global.super_monstermilk == 0
       itemselection = 4;
    if itemselection == 6 &amp;&amp; global.pikeballs == 0
       itemselection = 5;
    if itemselection == 7 &amp;&amp; global.superpikeballs == 0
       itemselection = 6;
    if itemselection == 8 &amp;&amp; global.bubbleshields == 0
       itemselection = 7;
    if itemselection == 9 &amp;&amp; global.fireballs == 0
       itemselection = 8;
    if itemselection == 10 &amp;&amp; !global.pirategun
       itemselection = 9;
    if itemselection == 11 &amp;&amp; global.keys == 0
       itemselection = 10;
}

if itemselection &lt; 0
   itemselection = itemselectionmax;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Transform into the various animals

/*Depending on what the dancemove variable equaled to, set it to the respective 
transformation*/

if dancemove != 0 &amp;&amp; danceTimer &gt;= 60 &amp;&amp; itemselection == 0
{
    alarm[4] = 40;
    instance_create (view_xview[0], view_yview[0], objFadeWhite);
    audio_play_sound (sndAnimalTransform, 10, false);
}
if danceTimer &lt; 60
{
    danceTimer = 0;
    canMove = true;
}

//Release 3 fireballs at once
if itemselection == 9 &amp;&amp; global.fireballs &gt;= 3
{
    if firechargeTimer &gt;= 60
    {
        alarm[1] = 45;
        fireball = true;
        sprite_index = sprShantaeShoot;
        
        instance_create (x, y, objFireball);
        instance_create (x, y, objFireballDiagonalUp);
        instance_create (x, y, objFireballDiagonalDown);
        
        global.fireballs -= 3;
        audio_play_sound (sndShantaeUseTripleFire, 10, false);
    }
    else
        canMove = true;
        
    firechargeTimer = 0;
}
else
    canMove = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
