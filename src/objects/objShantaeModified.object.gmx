<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>mskShantaeModified</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vel = 0;
vsp = 0;
attackStrength = 5;
ground = true;
action = 0;
enable = true;
xdir = 1;
canGetHit = true;

animation = 0;
animations_angle = 0;
animations_old      = -1;
animations_frame    = 0;
animations_framemin = 0;
animations_framemax = 0;
animations_speed    = 0;
animations_timer    = 0;
animations_return   = 0;

KEY_LEFT = keyboard_check (vk_left);
KEY_RIGHT = keyboard_check (vk_right);
KEY_UP = keyboard_check (vk_up);
KEY_DOWN = keyboard_check (vk_down);
KEY_A=ord("Z");
KEY_B=ord("X");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[1] = -1;
animations_alpha = 1;
canGetHit = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>action = 0;
animations_alpha = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Movesets for Shantae

if x &lt; 3
   x = 3;
else if x &gt; room_width-3
     x = room_width-3;
if y &lt; 5
   y = 5;
   
scrCollideSlopes2();
   
if (place_meeting (x, y+vsp+1, objSolid2) or place_meeting (x, y+vsp+1, objTopSolid)) &amp;&amp; vsp &gt;= 0
{
   ground = true;
   vsp = 0;
   action = 0;
}
else
{
    ground = false;
    vsp += 0.3;
    action = 1;
}

if vsp &gt; 8
   vsp = 8;
   
//Key mapping
if enable == true
{
    KEY_LEFT = keyboard_check (vk_left);
    KEY_RIGHT = keyboard_check (vk_right);
    KEY_UP = keyboard_check (vk_up);
    KEY_DOWN = keyboard_check (vk_down);
    KEY_A = keyboard_check_pressed (ord("Z"));
    KEY_B = keyboard_check_pressed (ord("X"));
}
else
{
    KEY_LEFT = 0;
    KEY_RIGHT = 0;
    KEY_UP = 0;
    KEY_DOWN = 0;
    KEY_A = 0;
    KEY_B = 0;
}

if (KEY_LEFT)
{
     xdir=-1;
}
if (KEY_RIGHT)
{
     xdir=1;   
}

if KEY_LEFT &amp;&amp; !place_meeting (x+vel-1, y, objSolid2)
{
    if action != 2
     vel = -3.25;
    else
        vel = -1;
}
else if KEY_RIGHT &amp;&amp; !place_meeting (x+vel+1, y, objSolid2)
{
    if action != 2
     vel = 3.25;
    else
        vel = 1;
}
else if (!KEY_LEFT &amp;&amp; !KEY_RIGHT) or (KEY_LEFT &amp;&amp; KEY_RIGHT)
     vel = 0;
     
if place_meeting (x+vel+1, y, objSolid2) or place_meeting (x+vel-1, y, objSolid2)
   vel = 0;

if action == 0 &amp;&amp; ground == false
   action = 1;

if KEY_A &amp;&amp; ground == true
{
    action = 1;
    ground = false;
    vsp = -8;
}
if KEY_DOWN &amp;&amp; ground == true &amp;&amp; action == 0 &amp;&amp; vel == 0
    action = 2;
else if action == 2 &amp;&amp; !KEY_DOWN
     action = 0;   
     
x += vel;
y += vsp;

if KEY_B
{
    if action == 0
    {
        action = 4;
        
        if animations_frame &gt; 71 &amp;&amp; animations_frame &lt;= 73
        {
            with instance_create (x, y, objMskStandWhip)
                 xdir = other.xdir;
        }
    }
    else if action == 2
    {
        action = 5;
        
        if animations_frame &gt; 79 &amp;&amp; animations_frame &lt;= 81
        {
            with instance_create (x, y, objMskDuckWhip)
                 xdir = other.xdir;
        }
    }
}

if action != 4 &amp;&amp; action != 5 &amp;&amp; action != 6
   enable = true;
else
    enable = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSolid2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid (direction, 0.01);
vsp = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objTopSolid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrCollideSlopes2();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Shantae's animation system. This is the same code as animating the MODIFIED version of Sonic.

/*Example:
if (vel == 0 &amp;&amp; ground == true &amp;&amp; action ==0) //The arguments to check
{
    animation = 0;               //The type of animation
    animations_framemin = 0;     //The minimum frame # for the animation
    animations_framemax = 6;     //The maximum frame # for the animation
    animations_return = 0;       //Loop to a specific frame
    animations_speed = 20;       //The animation speed
    animations_alpha = 1;        //The transparency
}*/

if vel == 0 &amp;&amp; ground == true &amp;&amp; action == 0 //Standing
{
    animation = 0;
    animations_framemin = 0;
    animations_framemax = 13;
    animations_return = 0;
    animations_speed = 40;
    animations_alpha = 1;
}
if vel != 0 &amp;&amp; ground == true &amp;&amp; action == 0 //Running
{
    animation = 1;
    animations_framemin = 14;
    animations_framemax = 28;
    animations_return = 14;
    animations_speed = 40;
    animations_alpha = 1;
}
if action == 1 &amp;&amp; vsp &lt; 0 //Jumping
{
    animation = 2;
    animations_framemin = 29;
    animations_framemax = 32;
    animations_return = 29;
    animations_speed = 40;
    animations_alpha = 1;
}
if action == 1 &amp;&amp; vsp &gt;= 0 //Jumping
{
    animation = 3;
    animations_framemin = 33;
    animations_framemax = 40;
    animations_return = 37;
    animations_speed = 40;
    animations_alpha = 1;
}
if action == 2 //Ducking
{
    animation = 4;
    animations_framemin = 41;
    animations_framemax = 57;
    animations_return = 45;
    animations_speed = 40;
    animations_alpha = 1;
}
if action == 3 //Crawling
{
    animation = 5;
    animations_framemin = 58;
    animations_framemax = 67;
    animations_return = 58;
    animations_speed = 40;
    animations_alpha = 1;
}
if action == 4 //Haiwhip (Standing)
{
    animation = 6;
    animations_framemin = 68;
    animations_framemax = 75;
    animations_return = 75;
    animations_speed = 40;
    animations_alpha = 1;
}
if action == 5 //Hairwhip (Ducking)
{
    animation = 7;
    animations_framemin = 76;
    animations_framemax = 83;
    animations_return = 83;
    animations_speed = 40;
    animations_alpha = 1;
}
if action == 6 //Hurt
{
    animation = 8;
    animations_framemin = 84;
    animations_framemax = 84;
    animations_return = 84;
    animations_speed = 40;
    animations_alpha = 0.5;
}

//==========================================================
    // Core of the animation system

    // If animation changed, change to the new parameters...
    if (animation!=animations_old) {
        animations_frame=animations_framemin;
        animations_timer=0;
        animations_old=animation;
    }

    // Add to the timer
    animations_timer+=animations_speed

    if (animations_timer&gt;=100)  // Check if we are ready to change of frame
    {    
        animations_timer=0;
        animations_frame+=1;
        
        if (animations_frame&gt;animations_framemax)
        {
            if action != 4 &amp;&amp; action != 5
               animations_frame=animations_return;
            else
            {
                action = 0;
            }
        }
    }

draw_sprite_ext (sprShantaeActions, animations_frame, x, y, xdir, 1, 0, c_white, animations_alpha)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
