<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHyperSonicStand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>mskSonic</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>acc = 0.1;
accN = acc;
accP = 0.3;
colour = 0;
maxSpeed = 65;
global.superstate = 2;
alarm[5] = 10;

if global.superstate == 1
   ringFrames = 60;
else if global.superstate == 2
     ringFrames = 30;

alarm[4] = ringFrames;
view_object = self;
global.vel = 0;

if room = rmZ1_1rm1
    global.vel = 0;
else if room = rmZ1_B
    global.vel = 8;

if room = rmZ1_1rm1
    maxSpeed = 13;
else if room = rmZ1_B
    maxSpeed = 8;

maxSpeedN = maxSpeed;
maxSpeedUp = 25;
ground = true;
rolling = false;
canMove = true;
spindash = false;
spindashTimer = 0;
lockedOn = false;
canHit = true;
canSpriteChange = true;
hspeed = 0;
airdashing = false;
drawAngle = 0;
homingattack = false;
stomping = false;
lightdashing = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if colour &lt; 13
{
   colour += 1;
   alarm[5] = 10;
}
else
{
   colour = 0;
   alarm[5] = 10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.rings -= 1;
alarm[4] = ringFrames;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canMove = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.invincible = false;
canHit = true;
audio_stop_all();
audio_play_sound (bgmSuperSonic, 10, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>maxSpeed = maxSpeedN;
acc = accN;
audio_stop_all();
audio_play_sound (bgmSuperSonic, 10, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canHit = true;
image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
if keyboard_check (vk_left) &amp;&amp; !place_meeting(x+(abs(global.vel)-1), y, objSolid) &amp;&amp; canMove == true &amp;&amp; rolling == false &amp;&amp; spindash == false &amp;&amp; sprite_index != sprSonicHit &amp;&amp; !keyboard_check (vk_down)
{
    global.vel-= acc * (5+ground);
    if global.vel &gt; 0 &amp;&amp; ground == false
        global.vel -= acc;
        
        if rolling == false
            image_xscale = -1;
}
if keyboard_check (vk_right) &amp;&amp; !place_meeting(x+abs(global.vel)+1, y, objSolid) &amp;&amp; canMove == true &amp;&amp; rolling == false &amp;&amp; spindash == false &amp;&amp; sprite_index != sprSonicHit &amp;&amp; !keyboard_check (vk_down)
{
    global.vel+= acc * (5+ground);
    if global.vel &lt; 0 &amp;&amp; ground == false
        global.vel += acc;
        
        if rolling == false
            image_xscale = 1;
}
if (keyboard_check(vk_left) &amp;&amp; !place_meeting(x+(abs(global.vel)*-1)-1, y, objSolid)) &amp;&amp; canMove == true &amp;&amp; spindash == false &amp;&amp; sprite_index != sprSonicHit &amp;&amp; maxSpeed == maxSpeedUp
{
    global.vel-= acc * (2+ground);
    if global.vel &gt; 0 &amp;&amp; ground == false
        global.vel -= acc;
        
        if rolling == false
            image_xscale = -1;
}
if (keyboard_check (vk_right) &amp;&amp; !place_meeting(x+abs(global.vel)+1, y, objSolid)) &amp;&amp; canMove == true &amp;&amp; spindash == false &amp;&amp; sprite_index != sprSonicHit &amp;&amp; maxSpeed == maxSpeedUp
{
    global.vel+= acc * (2+ground);
    if global.vel &lt; 0 &amp;&amp; ground == false
        global.vel += acc;
    
        if rolling == false
            image_xscale = 1;
}
scrCollideSlopes();

if keyboard_check (vk_left) &amp;&amp; place_meeting(x+(abs(global.vel)-1), y, objSolid) &amp;&amp; place_meeting (x, y-1, objSlopeParent) &amp;&amp; canMove == true &amp;&amp; rolling == false &amp;&amp; spindash == false &amp;&amp; sprite_index != sprSonicHit &amp;&amp; !keyboard_check (vk_down)
{
    global.vel-= acc * (5+ground);
    if global.vel &gt; 0 &amp;&amp; ground == false
        global.vel -= acc;
        
        if rolling == false
            image_xscale = -1;
}
if keyboard_check (vk_right) &amp;&amp; place_meeting(x+abs(global.vel)+1, y, objSolid) &amp;&amp; place_meeting (x, y-1, objSlopeParent) &amp;&amp; canMove == true &amp;&amp; rolling == false &amp;&amp; spindash == false &amp;&amp; sprite_index != sprSonicHit &amp;&amp; !keyboard_check (vk_down)
{
    global.vel+= acc * (5+ground);
    if global.vel &lt; 0 &amp;&amp; ground == false
        global.vel += acc;
        
        if rolling == false
            image_xscale = 1;
}

if x &lt; 3
    x = 3;
if x &gt; room_width - 3
    x = room_width - 3;
if y &lt; -5
    y = -5;
    
if global.rings == 0
{
    global.superstate = 0;
    instance_change (objSonic, true);
    audio_stop_all();
    
    if room = rmZ1_1rm1 or room = rmZ1_1rm2
       audio_play_sound (bgmEmeraldGarden, 10, true);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Deacceleration
if ground == true
{
    if global.vel &gt; 0
        global.vel -= acc/(rolling+1);
    else if global.vel &lt; 0
        global.vel += acc/(rolling+1);
}

closestSolid1 = instance_place (x+abs(global.vel)+1, y, objSolid);
closestSolid2 = instance_place (x+(abs(global.vel)*-1)-1, y, objSolid);
if (global.vel &gt; 0 &amp;&amp; closestSolid1 &gt;= 0 &amp;&amp; closestSolid1.canWall == true) or (global.vel &lt; 0 &amp;&amp; closestSolid2 &gt;= 0)
{
    if closestSolid1 &gt;= 0 
    {
        closestSolid1.canWall = true;
        global.vel = 0;
    }
    else if closestSolid2 &gt;= 0 
    {
        closestSolid2.canWall = true;
        global.vel = 0;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Speed limit
if global.vel &gt; maxSpeed   
    global.vel = maxSpeed;
else if global.vel &lt; -maxSpeed
    global.vel = -maxSpeed;
    
if global.vel &gt; -acc &amp;&amp; global.vel &lt; acc
{
    global.vel = 0;
    rolling = false;
}
        
x += global.vel;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gravity
if (place_meeting(x, y+vspeed+1, objSolid) &amp;&amp; vspeed &gt;= 0 or place_meeting (x, y+vspeed+1, objSlopeParent)) &amp;&amp; vspeed &gt;= 0
{
    ground = true;
    stomping = false;
    gravity = 0;
    lockedOn = false;
}
else
{
    ground = false;
    gravity = 0.25;
    if vspeed &gt; 8 &amp;&amp; sprite_index != sprSonicStomp
        vspeed = 8;
    else if vspeed &gt; 12 &amp;&amp; sprite_index == sprSonicStomp
        vspeed = 12;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle sprites
image_speed = 0.16;

if ground == true &amp;&amp; rolling == false &amp;&amp; spindash == false
{
    if global.vel == 0
       sprite_index = sprHyperSonicStand;
    else
        sprite_index = sprHyperSonicFly;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jumping
if ground == true &amp;&amp; spindash == false &amp;&amp; keyboard_check_pressed(ord("Z"))
{
    vspeed = -10;
    sprite_index = sprSuperSonicJump;
    audio_play_sound (sndJump, 10, false);
    audio_play_sound (sndSonicHup, 10, false);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rolling
if (global.vel &gt; 1 or global.vel &lt; -1) &amp;&amp; ground == true &amp;&amp; keyboard_check (vk_down) &amp;&amp; rolling == false
{
    rolling = true;
    sprite_index = sprSuperSonicRoll;
    mask_index = mskSonicRoll;
    canMove = false;
}
else if global.vel == 0 or ground == false
{
    mask_index = mskSonic;
    rolling = false;
    canMove = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spindash
if ground == true &amp;&amp; global.vel == 0 &amp;&amp; keyboard_check (ord("X"))
{
    spindash = true;
    global.vel = 0;
    canMove = false;
    image_speed = 0.16;
    
    if spindashTimer &lt; 8
        spindashTimer += 2;
    if spindashTimer &gt; 8
        spindashTimer = 8;
        
    spindashTimer = spindashTimer - ((spindashTimer div 1) / 256);
    
    sprite_index = sprSuperSonicSpindash; 
}
if ground == true &amp;&amp; spindash == true &amp;&amp; keyboard_check_released (ord("X"))
{
    global.vel = image_xscale * (6 + spindashTimer);
    rolling = true;
    spindash = false;
    spindashTimer = 0;
    sprite_index = sprSuperSonicRoll;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Return contol after getting hit

if ground == true &amp;&amp; sprite_index == sprSonicHit
{
    alarm[0] = 90;
    canMove = true;
    canSpriteChange = true;
    global.vel = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Airdash and Homing Attack

//Safety check
if sprite_index == sprSuperSonicJump &amp;&amp; ground == false &amp;&amp; keyboard_check_pressed (ord("Z")) &amp;&amp; distance_to_object (objEnemyParent) &gt;= 100
{
    airdashing = true;
    sprite_index = sprSuperSonicDash;
    audio_play_sound (sndSonicHa, 10, false);
    vspeed = 0;
    audio_play_sound (sndHoming, 10, false);
}

if (instance_exists (objEnemyParent) or instance_exists (objMonitorParent)) &amp;&amp; sprite_index == sprSuperSonicJump &amp;&amp; ground == false &amp;&amp; keyboard_check_pressed (ord("Z")) &amp;&amp; (distance_to_object (objEnemyParent) &lt; 100 or distance_to_object (objMonitorParent) &lt; 100)
{ 
    homingattack = true;
    instance_change (objSuperSonicHoming, true);
}

if airdashing == true &amp;&amp; global.vel &gt; -4 &amp;&amp; global.vel &lt; 0
{
    global.vel = -4;
    image_xscale = -1;
}
if airdashing == true &amp;&amp; global.vel &lt; 4 &amp;&amp; global.vel &gt; 0
{
    global.vel = 4;
    image_xscale = 1;
}
if airdashing == true &amp;&amp; global.vel == 0
    global.vel = image_xscale * 4;    

if airdashing == true &amp;&amp; (place_meeting (x, y-1, objSolid) or place_meeting (x, y-1, objSlopeParent))
{
    airdashing = false;
    if global.vel == 0
        sprite_index = sprSuperSonicStand;
    else
        sprite_index = sprSuperSonicFly;
}

if ground == true
    airdashing = false;
if airdashing == true
{
    canMove = false;
    mask_index = mskSonicDash;
}
if airdashing == false
{
    canMove = true;
    mask_index = mskSonic;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Falling

if sprite_index = sprSuperSonicRise &amp;&amp; stomping = false
{
    image_speed = 0.16;
    
    if image_index &gt; 3
        image_index = 1;
        
    if vspeed &gt;= 0 &amp;&amp; stomping = false
        sprite_index = sprSuperSonicFall;
}
if sprite_index = sprSuperSonicFall &amp;&amp; image_index &gt; 4
    image_index = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objMonitorParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound (sndSonicOkay, 10, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSolid">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid (direction, 12);
vspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.shield = 0;
global.invincible = false;

canMove = false;
alarm[3] = 60;

instance_create (0, 0, objRingCounter);
instance_create (0, 0, objRings);
instance_create (0, 0, objLivesCounter);
instance_create (0, 0, objLives);
instance_create (view_xview[0]+240, view_yview[0]+180, objStart);

if room != rmSonicHub1
{
    instance_create (0, 0, objTimer);
    instance_create (0, 0, objScore);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if y &gt; room_height
    instance_change (objSonicDie, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext (sprite_index, image_index, round(x), round(y), image_xscale, image_yscale, drawAngle, image_blend, image_alpha);
scrDrawColours (sprHyperSonicActionsCol1, sprHyperSonicActionsCol2, sprHyperSonicActionsCol3, sprHyperSonicActionsCol4, sprHyperSonicActionsStatic);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
