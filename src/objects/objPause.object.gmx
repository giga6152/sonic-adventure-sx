<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPause</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-99999</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>screen_save ("pause.png");
instance_deactivate_all (true);
instance_activate_object (objGamepad);
audio_pause_all();
audio_play_sound (sndPause, 10, false);

pause = sprite_add ("pause.png", 0, false, true, 0, 0);
option = 0;

delay = 10;

//If the player has more than 0 lives, show the first pause menu, else, show the second.
if global.life[global.savedata] &gt; 0
&amp;&amp; global.game_mode != mini_games sprite_index = sprPause; //Allows the player to retry
else sprite_index = sprPause2; //Does not allow the player to retry
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_activate_object (objGamepad);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite_delete (pause);
file_delete ("pause.png");

//Reset player spawn values
global.start_x = -1;
global.start_y = -1;
global.playerspawnx = -1;
global.playerspawny = -1;

//Reset times and scores
global.points = 0;
global.minutesC = 0;
global.secondsC = 0;
global.millisecondsC = 0;
global.milC = 0;
global.millisecondsG = 0;
global.secondsG = 0;
global.minutesG = 0;
global.mil = 0;

//Send the player back to the first section of the level
room_goto(global.first_room);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_activate_object (objGamepad);

if !instance_exists (objFade)
{
    if keyboard_check_pressed (vk_up) &amp;&amp; option &gt; 0 option -= 1;
    else if keyboard_check_pressed (vk_down) &amp;&amp; option &lt; 2 option += 1;
}

image_index = option;

delay -= 1;

if delay &lt;= 0 &amp;&amp; !instance_exists (objFade)
{
    if keyboard_check_pressed (vk_enter) or keyboard_check_pressed (ord("Z"))
    {
        if option == 0 //Continue
        {
            instance_destroy();
            sprite_delete (pause);
            file_delete ("pause.png");
            instance_activate_all();
            audio_resume_all();
            audio_play_sound (sndPause, 10, false);
        }
        else if option == 1 //Retry
        {
            if global.life[global.savedata] &gt; 0 &amp;&amp; global.game_mode != mini_games
            {
                global.life[global.savedata] -= 1; //Take one life away from the player
                instance_create (0, 0, objFade);
                instance_activate_object (objFade);
                alarm[0] = 40;
            }
        }
        else if option == 2 //Quit
        {
            sprite_delete (pause);
            file_delete ("pause.png");
            room_goto (rmMainMenu);
            audio_play_sound (sndPause, 10, false);
        }
    }
    
    if keyboard_check_pressed (vk_escape) or keyboard_check_pressed (ord("X"))
    {
        instance_destroy();
        sprite_delete (pause);
        instance_activate_all();
        audio_resume_all();
        audio_play_sound (sndPause, 10, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room_width == 480 &amp;&amp; room_height == 360
{
    draw_sprite_stretched(pause, 0, 0, 0, 480, 360);
    draw_sprite_ext(sprite_index, image_index, 208, 160, 1, 1, 0, c_white, 1);
}
else
{
    if !view_visible[1]
    {
        draw_sprite_stretched(pause, 0, view_xview[0], view_yview[0], view_wview[0], view_hview[0]);
        draw_sprite_ext(sprite_index, image_index, view_xview[0]+208, view_yview[0]+160, 1, 1, 0, c_white, 1);
    }
    else
    {
        if view_current == 0
        {
            draw_sprite_stretched(pause, 0, view_xview[0], view_yview[0], view_wview[0], view_hview[0]*2);
            draw_sprite_ext(sprite_index, image_index, view_xview[0]+208, view_yview[0]+160, 1, 1, 0, c_white, 1);
        }
        else if view_current == 1
        {
            draw_sprite_stretched(pause, 0, view_xview[1], view_yview[1]-90, view_wview[1], view_hview[1]);
            draw_sprite_ext(sprite_index, image_index, view_xview[1]+208, view_yview[1]+160-180, 1, 1, 0, c_white, 1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
