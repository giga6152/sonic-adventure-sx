<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>objKnuckles</parentName>
  <maskName>MaskMain</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Declarate Player Variables for later use */

    /* Motion values
         hsp;
         hspm;                  
         hspl;                  

         acc;                   
         dcc;

         vsp; 
         vspl;
         vfr;
   
         jmp;
    
    // Control iables
         angle;
         ground;
         layer;
         xdir;    

         action;
    
    // Animation iables
         animation;
         animations_old;
         animations_frame;
         animations_framemin;
         animations_framemax;
         animations_speed;
         animations_timer;
         animations_angle;
         animations_return;
    
    // Calculation values
         cosine;
         sine;
     cs;
     sn;*/
    
    event_inherited();
    
    // Input iables
         KEY_LEFT = keyboard_check (vk_left) //or (gamepad_axis_value (0, gp_axislh) &lt; -0.6);
         KEY_RIGHT = keyboard_check (vk_right) //or (gamepad_axis_value (0, gp_axislh) &gt; 0.6);
         KEY_UP = keyboard_check (vk_up) //or (gamepad_axis_value (0, gp_axislv) &lt; -0.6);
         KEY_DOWN = keyboard_check (vk_down) //or (gamepad_axis_value (0, gp_axislv) &gt; 0.6);
         KEY_A=ord("Z");
         KEY_B=ord("X");
         KEY_C=ord("C");
         KEY_AH=keyboard_check (ord("Z"));
    
    /*==============================================================================//
                        Setup settings for Sonic
//==============================================================================*/

    //instance_create (x, y, objCamera);
    
    hsp                 = 0;                     /* Horizontal Speed */
    hspm                = 19;                    /* Max Horizontal Speed */
    hspl                = 38;
    
    //instance_create (x, y, objOptimize);
    
    if room != rmZ1_BK
    {
       hsp = 0;
       hspm = 19;
    }  
    else
    {
        hsp = 8;
        hspm = 8;
    }
    alarm[3] = 60;                                                                            /* Horizontal Speed Limit */

    acc                 = 0.366;                  /* Acceleration */
    dcc                 = 0.1;                  /* Deacceleration */

    vsp                 = 0;                     /* Vertical Speed */
    vspl                = 16;                    /* Vertical Speed Limit */
    vfr                 = 0.3;                   /* Vertical Force */
   
    jmp                 = -8;                    /* Jump strenght */
    
    atk                 = 0;                     /* Check if Sonic is using an attack */
    
    lock                = 0;                     /* Check if Sonic is lock on to an enemy */
    
    spin                = 0;                     /* Check if Sonic is using spindash */
    
    delay               = 0;                     /* Set key delay */
    
    ready               = 0;                     /* Player time after injury */
    blink               = 0;                     /* Blink after injury */
    
    mach                = false;
    machTimer           = 5;
    
    enable              = 1;                     /* Enable/Disable the keyboard */
    
    dead                = 0;                     /* Detect if dead */

//==============================================================================    
    angle               = 0;                     /* Angle */
    ground              = 1;                     /* Check if the player is on the ground */
    action              = 0;                     /* Action */
    layer               = 0;                     /* Actual Layer */
    skid_decc           = 0.17;
    
    xdir                = 1;                     /* Direction */
    
//==============================================================================
    animations_angle = 0;
    animations_old      = -1;
    animations_frame    = 0;
    animations_framemin = 0;
    animations_framemax = 0;
    animations_speed    = 0;
    animations_timer    = 0;
    animations_return   = 0;
    
    
    global.superstate = 1;
    
    animationDash = 15;
    animationTrick = 17;
    
    combo = 0;
    combo_timer = 0;
    
//==============================================================================
    cosine                = 1;
    sine                = 0;
    
//===============================================================================
    rebounce_action     = 7; //Use this on enemy to tell Sonic to bounce up after using homing atk 
                             //(number must be the same as the action in draw event)
    ldash               = 0; //Tell when light dash is activated
    
    airSpecial = 16;
    groundSpecial = 7;
    
    tube_action = 19;
    
    deathobj = objKnucklesHitDie;
    
    aura_index = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.rings -= 1;
alarm[3] = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*global.invincible = false;
audio_stop_all();
audio_play_sound (bgmSuperSonic, 10, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*hspm = 13;
audio_stop_all();
audio_play_sound (bgmSuperSonic, 10, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>vsp += 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera
if view_xview[0]&lt;room_width-view_wview[0]-2 //&amp;&amp; global.setview=0
    {
    view_xview[0]=x-240+hsp*6*cos(angle*pi/180)
    }
    else
    if view_xview[0]&gt;room_width-view_wview[0]-2 &amp;&amp; instance_exists (objSignpost)
    {view_xview[0]=room_width-view_wview[0]}
    else
    {view_xview[0]=x-240+hsp*6*cos(angle*pi/180)}
    
    /*if view_yview[0]&lt;room_height-view_hview[0]-2 &amp;&amp; global.setview=0
    {view_yview[0]=y-160+vsp*4*cos(angle*pi/180)}
    else
    if view_yview[0]&gt;room_height-view_hview[0]-2 &amp;&amp; global.setview=0
    {view_yview[0]=room_height-view_hview[0]}
    else
    {view_yview[0]=y-160+vsp*4*cos(angle*pi/180)}*/
    
    view_yview[0]=y-160-hsp*6*sin(angle*pi/180)
    
    if view_xview[0]&lt;0
    {view_xview[0]=0}
    
    if view_yview[0]&lt;0
    {view_yview[0]=0}
    
    if view_xview[0]+view_wview[0]&gt;room_width
    {view_xview[0]=room_width-view_wview[0]}
    
    if view_yview[0]+view_hview[0]&gt;room_height
    {view_yview[0]=room_height-view_hview[0]}
    
    if x&lt;view_xview[0]+2
    {x=view_xview[0]+2 hsp=0}
    if x&gt;room_width-2 
    {x=room_width-2 hsp=0}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if x &lt; hspm
   x = hspm;
else if x &gt; room_width-hspm
     x = room_width-hspm;
if y &lt; 5
   y = 5;
      //Activate this script if alive
   if dead=0
   {

   // Limit the values of the movement
   if (hsp&gt;hspl)     hsp = hspl;
   if (hsp&lt;-hspl)    hsp = -hspl;
   if (vsp&gt;vspl)     vsp = vspl;
   
   hspm = 19;
   hspl = 38;

   //================================================================= 
   //Horizontal Movement.
   if (hsp&gt;0) {         // If player is going to the right
      repeat (hsp) {    // move "horizontal speed" times
                        // while the sensor is not colliding.
                        
          if (scrCollideSensorRight(obstacle_layer | high_layer | low_layer,MaskLarge)) break;

          x+=cosine;
          y-=sine;
      }
   } else if (hsp&lt;0) {  // Same goes for while the player is going to the left
      repeat (-hsp) {
          if (scrCollideSensorLeft(obstacle_layer | high_layer | low_layer,MaskLarge)) break;
      
          x-=cosine;
          y+=sine;
      }
   }

   //=================================================================   
   //Vertical Movement. It does the same as the horizontal movement but on the vertical axis.
   if (vsp&gt;0) {
      repeat (vsp) {
          if (scrCollideSensorBottom(obstacle_layer | high_layer | low_layer,MaskLarge)) break;  
          y+=1;
      }
   } else if (vsp&lt;0) {
      repeat (-vsp) {
          if (scrCollideSensorTop(obstacle_layer | high_layer | low_layer,MaskLarge)) break;  
          y-=1;
      }
      if (scrCollideSensorTop(obstacle_layer | high_layer | low_layer,MaskLarge)) vsp=0;
   }

   //=================================================================      
   // Landing. If we are falling and we landed, if the delimiter lines are colliding, search for new angle.
   if (vsp&gt;=0 &amp;&amp;
      !ground &amp;&amp; 
      scrCollideSensorBottom(obstacle_layer | high_layer | low_layer,MaskLarge) &amp;&amp;
      scrCollideSensorRight_line(obstacle_layer | high_layer | low_layer) &amp;&amp;
      scrCollideSensorLeft_line(obstacle_layer | high_layer | low_layer))
   {
         angle=calculate_angle(0,8,obstacle_layer | high_layer | low_layer);
         cosine=cos(degtorad(angle));
         sine=sin(degtorad(angle));

         hsp-=sine*vsp;
         vsp=0;
         ground=1;

         if (action==1) action=0;       // If we were jumping, set to normal again
   }

   //=================================================================
   // Wall Collisions, if the side masks are colliding, move the player in order to avoid getting stuck.
   while(scrCollideSensorRight(obstacle_layer | high_layer | low_layer,MaskLarge))
   {
      x-=cosine;
      y+=sine;                                                                                        
   }

   while(scrCollideSensorLeft(obstacle_layer | high_layer | low_layer,MaskLarge))
   {
      x+=cosine;
      y-=sine;                                                                                        
   }

   //=================================================================   
   // Do slopes while we're on the ground.
   if (ground) {
      // Slopes up: If the main sensor is colliding with the background, push to up
      while (scrCollideSensorMain(obstacle_layer | high_layer | low_layer)) {
          x-=sine;
          y-=cosine;  
      }

      // Slopes down: If the main sensor isn't colliding with the background but the slope sensor does, push to down.
      while (!scrCollideSensorMain(obstacle_layer | high_layer | low_layer) &amp;&amp; scrCollideSensorSlopes(obstacle_layer | high_layer | low_layer,MaskMedium)) {
          x+=sine;
          y+=cosine;  
      }
   }

   //=================================================================     
   // Now, check if the delimeter lines aren't colliding while we are on the ground.
   // If that's true, get impulsed to the air
   if (ground)
   {
        if (!scrCollideSensorLeft_line(obstacle_layer | high_layer | low_layer) || !scrCollideSensorRight_line(obstacle_layer | high_layer | low_layer))
        {
            angle=0;
            vsp=-sine*hsp;
            hsp=cosine*hsp;
            ground=0;   
            cs=1;
            sn=0;
        }
       // Or if the player is too slow and we're on the roof or on a wall, fall
       if (angle&gt;55 &amp;&amp; angle&lt;305 &amp;&amp; abs(hsp)&lt;5.5)
       {
          angle=0;
          vsp=-sine*hsp;
          hsp=cosine*hsp;
          ground=0;
          cs=1;
          sn=0;
        }        
   }

   //=================================================================   
   // After moving, get the new angle of the ground while the delimeter lines are colliding
   // and the player is on the ground.
   if (ground &amp;&amp; scrCollideSensorLeft_line(obstacle_layer | high_layer | low_layer) &amp;&amp; scrCollideSensorRight_line(obstacle_layer | high_layer | low_layer)) {
      angle=calculate_angle(angle,8,obstacle_layer | high_layer | low_layer);
      cosine=cos(degtorad(angle));
      sine=sin(degtorad(angle));
   } else {
      angle=0;
      cosine=1;
      sine=0;
   }
   
   //=================================================================   
   // Return the mask to the normal one
   sprite_index=MaskMain;
   mask_index=MaskMain;
   
   }//End of dead script
     
       
   // First, we query the keyboard and store the key data into the variables, for latter use.
   if enable=1
   {
   KEY_LEFT = keyboard_check (vk_left) //or (gamepad_axis_value (0, gp_axislh) &lt; -0.6);
   KEY_RIGHT = keyboard_check (vk_right) //or (gamepad_axis_value (0, gp_axislh) &gt; 0.6);
   KEY_UP = keyboard_check (vk_up) //or (gamepad_axis_value (0, gp_axislv) &lt; -0.6);
   KEY_DOWN = keyboard_check (vk_down) //or (gamepad_axis_value (0, gp_axislv) &gt; 0.6);
   KEY_A        = keyboard_check_pressed(ord('Z')); //This has been changed to fit certain actions
   KEY_B        = keyboard_check_pressed(ord('X'));
   KEY_C        = keyboard_check_pressed(ord('C'));
   KEY_AH       = keyboard_check (ord("Z")); //The jump button held down
   }
   else
   {
   KEY_LEFT     = 0 //Keyboard is disabled
   KEY_RIGHT    = 0
   KEY_UP       = 0
   KEY_DOWN     = 0
   KEY_A        = 0
   KEY_AH        = 0
   KEY_B        = 0
   KEY_C        = 0
   }
   //Setup shortcut varibles
   enemy=instance_nearest(x,y,objEnemyParent)
   nring=instance_nearest(x,y,objLightRing)

   // If the player pressed any direction, change
   if (KEY_LEFT)
   {
        xdir=-1;
   }
   if (KEY_RIGHT)
   {
        xdir=1;   
   }
   
   //Depth control
   if dead=0
   {depth=layer}
   
   //Set combo timer
   if combo_timer&gt;0 &amp;&amp; ground
   {combo_timer-=1}
   
   if combo_timer&lt;=0 //Reset combo. Knuckles will use first punch
   {combo=0}
   

   // After checking if the player is on the ground, we apply the deacceleration based on the actual angle.  
   if (ground)
   {
        hsp-=sine*(dcc*2.1);
   }
   
   // Accelerate or deaccelerate if the player pressed the keys
   if (KEY_LEFT)
   {
     if (hsp&gt;=0) hsp-=acc*4;                // If the player pressed the left key and the player was moving to the right, deaccelerate faster
     if (hsp&lt;0 &amp;&amp; hsp&gt;-hspm) hsp-=acc;      // otherwise, do normal acceleration
   }
   else if (KEY_RIGHT)                      
   {
     if (hsp&lt;=0) hsp+=acc*4;                // Same for the right, deaccelerate faster
     if (hsp&gt;0 &amp;&amp; hsp&lt;hspm) hsp+=acc;       // or do normal acceleration
   }
   else                                     // If any of these two keys hasn't been pressed, deaccelerate
   {
     if (hsp&gt;0) hsp-=dcc;                   // While going to the right, deaccelerate
     if (hsp&lt;0) hsp+=dcc;                   // While going to the left, deaccelerate

     if (hsp&gt;0 &amp;&amp; hsp&lt;dcc) hsp=0;           // If the speed is lower than deacceleration, set to 0.
     if (hsp&lt;0 &amp;&amp; hsp&gt;-dcc) hsp=0;
   }
   

   // Check for collisions on the sides. If those are true, set the speed to 0.
   if (scrCollideSensorRight(obstacle_layer | high_layer | low_layer,MaskExtraLarge) &amp;&amp; hsp&gt;0) hsp=0;
   if (scrCollideSensorLeft(obstacle_layer | high_layer | low_layer,MaskExtraLarge) &amp;&amp; hsp&lt;0) hsp=0;
       
   // Now do vertical Movement.
   if (!ground)
   {
     // If we aren't on the ground and we are falling and the bottom sensor is colliding, land
     if (vsp&gt;=0 &amp;&amp; scrCollideSensorBottom(obstacle_layer | high_layer | low_layer,MaskLarge))
     {
        ground=1;
        vsp=0;
        if (action==1) action=0;       // If we were jumping, deactivate jump
     }
   } else {
     // Otherwise, if we are on the ground and the bottom sensor isn't colliding, fall.
     if (!scrCollideSensorBottom(obstacle_layer | high_layer | low_layer,MaskLarge))    
     {
         ground=0;
     }
   }
   
   if (!ground)
   {
     // Apply forces if we are falling
     vsp+=vfr;   
   }

   // Jump! (I add to this to allow Sonic to jump only during certain actions)
   if action=0 or action=3
   {
   if (KEY_A &amp;&amp; ground)
   {
   
     ground=0;
     
     audio_play_sound (sndJump, 10, false);
     audio_play_sound (sndKnucklesJump, 10, false);
     
     vsp=cosine*jmp-sine*hsp; // Calculate the speed
     hsp=cosine*hsp+sine*jmp;

     angle=0;     
     cosine=1;                // Values at angle 0
     sine=0;

     action=1;              // Set action to Jump
     
     delay=5                // Set key delay
   }
   }
   
   //If walking while in air, change to fall animation
   if action=0 &amp;&amp; ground=0
   {action=6}
   
   //Count down delay
   if delay&gt;0
   {delay-=1}
   
   //Blink after injury
   if ready&gt;0
   {
   ready-=1
   blink+=1
   }
   else
   {blink=0}
   
   if blink&gt;10
   {blink=0}
   
   // Ducking
   if KEY_DOWN &amp;&amp; action=0 &amp;&amp; ground &amp;&amp; hsp=0 //(Always remember to set required action in order to perform other action)
   {action=2}
   else
   if action=2 &amp;&amp; not KEY_DOWN
   {action=0}
   
   //Roll
   if KEY_DOWN &amp;&amp; abs(hsp)&gt;0.3 &amp;&amp; ground &amp;&amp; action=0
   {action=3 audio_play_sound (sndSpindashRelease, 10, false);} //Play rolling sound here
   else
   if action=3 &amp;&amp; abs(hsp)&lt;=0.3
   {action=0}
   
   //Friction control while rolling
   if action=3
   {
   if angle=0 or angle=180 //If on flat ground, add friction
   {hsp-=xdir*0.1}
   else
   if xdir=1 &amp;&amp; angle&gt;0 &amp;&amp; angle&lt;180 //If going uphill going right, add friction
   {hsp-=xdir*0.1}
   else
   if xdir=-1 &amp;&amp; angle&lt;=360 &amp;&amp; angle&gt;180 //If going uphill going left, add friction
   {hsp-=xdir*0.1}
   else
   {hsp+=xdir*0.1} //If going downhill, reduce friction
   }
   
   //Set a speed limit while rolling
   if action=3
   {hspm=hspl} //Set max running speed to speed limit
   else
   {hspm=12} //Reset max running speed
   
   //If rolling in air, set to jump
   if action=3 &amp;&amp; ground=0
   {action=1}
   
   //Spindash (must be ducking dirst)
   //Classic way (hold down and press jump repeatedly)
   if KEY_A &amp;&amp; action == 2
   {
        action = 4.5;
        spin += 1;
        audio_play_sound (sndSpindashChargeClassic, 10, false);
   }
   if KEY_A &amp;&amp; action == 4.5
   {
        spin += 1;
        audio_play_sound (sndSpindashChargeClassic, 10, false);
   }
   if spin&gt;6
   {spin=6}
   
   if not KEY_DOWN &amp;&amp; action==4.5
   {hsp+=spin*xdir*3 spin=0 action=3 audio_play_sound (sndSpindashRelease, 10, false) audio_stop_sound (sndSpindashChargeClassic)}
   
   if (action!=4.5 &amp;&amp; action!=4)
   {spin=0}
   
   if action==4.5 or action==4
   {hsp=0}
   
   //Glide
   if action=1 or action=6
   {
   if KEY_A &amp;&amp; delay=0
   {hsp=xdir action=5 vspeed = 0.8 audio_play_sound (sndJump, 10, false);}
   }
   
   if action == 5 vspeed = 0.8; else vspeed = 0;
   
   if action == 5 &amp;&amp; vspeed &gt; 0.8 vspeed = 0.8;
   
   if not KEY_AH &amp;&amp; action=5 &amp;&amp; ground=0 //Release this glide
   {action=0}
   
   //Combo punches (Knuckles will issue a series of punches)
   if KEY_B &amp;&amp; action=0 &amp;&amp; ground
   {action=7 combo+=1 combo_timer=30} //Put punching sounds in here
   
   if combo&gt;3 //Reset after the uppercut
   {combo=0 audio_play_sound (sndKnucklesDrill, 10, false);}
     
   //Grind on rail
   if dead=0
   {
   if collision_circle(x,y+30,20,obj_rail,1,1) &amp;&amp; ground //Grind on rail
   {if action!=8 audio_play_sound (sndGrindStart, 10, false); action=8 hsp+=acc*2*xdir}
   else
   if action=8 //If at end of rail
   {action=0 audio_stop_sound (sndGrindRail)}
   }
   
   //Play sfx
   if action == 8 &amp;&amp; !audio_is_playing (sndGrindRail)
        audio_play_sound (sndGrindRail, 10, true);
   if action != 8 audio_stop_sound (sndGrindRail);
   
   if action=8 &amp;&amp; KEY_A //This had to be set here to make Knuckles jump off rail but not land back on rail
   {action=1 vsp=jmp ground=0 audio_play_sound (sndJump, 10, false) audio_play_sound (sndKnucklesJump, 10, false);}
   
   //Wall climb (work when knuckles is gliding and is stopped by a wall)
   if action=5 &amp;&amp; hsp=0 &amp;&amp; collision_line(x,y,x+xdir*26,y,objWall,1,1)
   {action=11}
   
   if action=12
   {
   vsp=0
   
   if KEY_UP //Move up
   {vsp=-1}
   
   if KEY_DOWN //Move down
   {vsp=1}
   
   if KEY_LEFT or KEY_RIGHT //Let go
   {
   if abs(hsp)&gt;0
   {action=0}
   }
   
   if KEY_A //Jump off wall
   {vsp=jmp action=1 audio_play_sound (sndJump, 10, false); audio_play_sound (sndKnucklesJump, 10, false);}
   }
   
   if action=12 &amp;&amp; not collision_line(x,y,x+xdir*26,y,objWall,1,1) //If there is not wall in front, end climb
   {
   if vsp&lt;0
   {action=13}
   else
   {action=0}
   }
   
   //Skidding
   if ( action == 14 )
        {
            // first check the direction of the movement
            if ( hsp &gt; 0 )
            {
                // decelerate while pressing left
                if (KEY_LEFT)       hsp -= skid_decc;
                
                // finish skidding
                if ( hsp &lt; 0 || !KEY_LEFT || !ground ) action = 0;
            }
            else if ( hsp &lt; 0 ) {
                // decelerate while pressing left
                if (KEY_RIGHT)      hsp += skid_decc;
                
                // finish skidding
                if ( hsp &gt; 0 || !KEY_RIGHT || !ground ) action = 0;
            }
            if (hsp == 0) action = 0;
        }
        else {
            if ( action == 0 &amp;&amp; ground == true)
            {
                if ((hsp&lt;-5) &amp;&amp; KEY_RIGHT)
                {
                    action = 14;
                }
                if ((hsp&gt;5) &amp;&amp; KEY_LEFT)
                {
                    action = 14;
                }
            }
        }
        
if action == animationDash &amp;&amp; ground
   action = 0;
   
   //Drill claw (must purchase drill first)
   if global.drill == true &amp;&amp; !ground &amp;&amp; KEY_C
   {
        action = 16;
        enable = 0;
        hsp = 0;
        audio_play_sound (sndKnucklesDrill, 10, false);
   }
   if ground == true &amp;&amp; action == 16
    {
            action = 0;
            enable = 1;
            audio_play_sound (sndStompLand, 10, false);
    }
   
//Detransform automatically if we hit zero rings
if global.rings == 0
{
    global.superstate = 0;
    instance_change (objKnuckles, true);
    audio_stop_all();
    
    /*if room = rmZ1_1Krm1 or room = rmZ1_1Krm2
       audio_play_sound (bgmEmeraldGarden, 10, true);
    if room = rmZ2_1Krm1 or room = rmZ2_1Krm2
       audio_play_sound (bgmLavaFilter, 10, true);*/
}


//After-images (similar to the boost mode)
if hsp != 0 or vsp != 0 or speed != 0
{
    machTimer -= 1;
    
    if machTimer &lt;= 0
    {
        instance_create (x, y, objSuperKnucklesAfterImage);
        machTimer = 5;
    }
}

//Gimmick properties. These are set in seperate scripts for easy reference.

scrWater();
scrGimmicks();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Aura sound effect
if !audio_is_playing (sndSuperAura) audio_play_sound (sndSuperAura, 10, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objRainbow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound (sndKnucklesAlright, 10, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objCheckpoint">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.start_x = other.x;
global.start_y = other.y;


if other.sprite_index == sprCheckpoint
{
    audio_play_sound (sndCheckpoint, 10, false);
    with other sprite_index = sprCheckpointActive;
    instance_create (view_xview[0]+240, view_yview[0]+180, objCheckpointTime);
    global.millisecondsC = global.milliseconds;
    global.secondsC = global.seconds;
    global.minutesC = global.minutes;

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objEnemyParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.invincible == false &amp;&amp; global.superstate == 0 &amp;&amp; global.rings &gt; 0
{
if atk=0 &amp;&amp; ready&lt;=0 &amp;&amp; enable=1
{
{
ready=200
action=9
audio_play_sound (sndKnucklesHurt, 10, false)

if global.shield == 0 &amp;&amp; global.rings &gt; 0
{
    audio_play_sound (sndRingLose, 10, false)
    
    if global.rings &lt;= 32 scrLoseRings(global.rings,x,y,objLoseRing) else scrLoseRings(32,x,y,objLoseRing)
    
    global.rings = 0;
}
else
{
    global.shield = 0
}

ground=0
vsp=-5
enable=0
}
}
}
else if global.rings == 0 &amp;&amp; global.shield == 0
if atk=0 &amp;&amp; ready&lt;=0 &amp;&amp; enable=1 //Player dies if there are no rings
{
instance_change (objKnucklesHitDie, true);
hsp = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objChangeLayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Change layer depending on speed
if (hsp&gt;0 &amp;&amp; ground) layer=1;
if (hsp&lt;0 &amp;&amp; ground) layer=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objLowLayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>layer=1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objHighLayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>layer=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSolid2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid (direction, 12);
vspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.shield = 0;
global.invincible = false;

canMove = false;
alarm[3] = 60;

instance_create (0, 0, objRingCounter);
instance_create (0, 0, objRings);
instance_create (0, 0, objLivesCounterKnuckles);
instance_create (0, 0, objLives);
instance_create (view_xview[0]+240, view_yview[0]+180, objStart);
instance_create (0, 0, objTimer);
instance_create (0, 0, objScore);

if( global.start_x == -1 &amp;&amp; global.start_y == -1) {
    global.start_x = x;
    global.start_y = y;
}

x = global.start_x;
y = global.start_y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if y &gt; room_height
{
    instance_change (objKnucklesDie, true);
    hsp = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Simple animation system.

    //==========================================================
    // Set new animation

    // -&gt; Standing animation
    if (hsp==0 &amp;&amp; ground &amp;&amp; action==0) {
        animation=0;
        animations_framemin=0;
        animations_framemax=3;
        animations_return=0;
        animations_speed=20;
        atk=1
        enable = 1;
    }

    /* -&gt; Walking animation
    if (abs(hsp)&gt;0 &amp;&amp; abs(hsp)&lt;2 &amp;&amp; ground &amp;&amp; action==0) {
        animation=1;
        animations_framemin=21;
        animations_framemax=28;
        animations_return=21;
        animations_speed=12+abs(hsp*3);
        atk=0
    }*/
    
    /* -&gt; Jog animation
    if (abs(hsp)&gt;=2 &amp;&amp; abs(hsp)&lt;4 &amp;&amp; ground &amp;&amp; action==0) {
        animation=2;
        animations_framemin=29;
        animations_framemax=36;
        animations_return=29;
        animations_speed=12+abs(hsp*3);
        atk=0
    }
    
    // -&gt; Run animation
    if (abs(hsp)&gt;0 &amp;&amp; abs(hsp)&lt;4 &amp;&amp; ground &amp;&amp; action==0) {
        animation=1;
        animations_framemin=37;
        animations_framemax=44;
        animations_return=37;
        animations_speed=20;
        atk=0
    }
    
    // -&gt; Sprint animation
    if (abs(hsp)&gt;=4 &amp;&amp; abs(hsp)&lt;8 &amp;&amp; ground &amp;&amp; action==0) {
        animation=2;
        animations_framemin=45;
        animations_framemax=52;
        animations_return=45;
        animations_speed=24;
        atk=0
    }*/
    
    // -&gt; Fly animation
    if (abs(hsp)&gt;0 &amp;&amp; ground &amp;&amp; action==0) {
        animation=1;
        animations_framemin=4;
        animations_framemax=7;
        animations_return=4;
        animations_speed=12+abs(hsp*2);
        atk=1
        enable = 1;
    }

    // -&gt; Jump animation
    if (action==1 or action==tube_action) {
        animation=2;
        animations_framemin=8;
        animations_framemax=11;
        animations_return=8;
        animations_speed=12+abs(hsp);
        atk=1
        if action == 1 enable = 1; else enable = 0;
        if action==1 {draw_sprite_ext(spr_circleknucklesSuper,0,x,y,1.4,1.4,0,c_white,0.5) instance_create(x,y,obj_circleknucklesSuper)}
    }
    
    // -&gt; Duck animation
    if (action==2) {
        animation=77;
        animations_framemin=79;
        animations_framemax=82;
        animations_return=82;
        animations_speed=30;
        atk=0
    }
    
    // -&gt; Roll animation
    if (action==3) {
        animation=3;
        animations_framemin=12;
        animations_framemax=15;
        animations_return=12;
        animations_speed=20;
        atk=1
        enable = 1;
        draw_sprite_ext(spr_circleknucklesSuper,0,x,y,1.4,1.4,0,c_white,0.5) instance_create(x,y,obj_circleknuckles)
    }
    
    // -&gt; Spindash animation
    if (action==4.5) {
        animation=99;
        animations_framemin=83;
        animations_framemax=86;
        animations_return=83;
        animations_speed=30+abs(spin*4);
        atk=1
        hsp=0
    }
    
    // -&gt; Glide animation
    if (action==5 &amp;&amp; ground=0) {
        animation=4;
        animations_framemin=16;
        animations_framemax=17;
        animations_return=16;
        animations_speed=30;
        atk=1
        hsp+=xdir*acc*3.5
        vsp += 0.3;
        enable = 1;
        
    if  hsp&gt;4
        {hsp=4}
        
    if  hsp&lt;-4
        {hsp=-4}
        
    if  vsp&gt;0.8
       {vsp=0.8}
        
    if  ground
        {action=0}
    }
    
    // -&gt; Landing animation
    if (action==5 &amp;&amp; ground) {
        animation=5;
        animations_framemin=4;
        animations_framemax=7;
        animations_return=4;
        animations_speed=30;
        atk=1
        hsp-=xdir*dcc*3.5
        enable = 1;
                
    if  abs(hsp)&lt;=dcc*2
        {action=0}
    }

    
    // -&gt; Bounce up animation
    if (action==6 &amp;&amp; vsp&lt;0) {
        animation=8;
        animations_framemin=18;
        animations_framemax=19;
        animations_return=18;
        animations_speed=30+abs(vsp*2);
        atk=1
        enable = 1;
    }

    // -&gt; Fall animation
    if (action==6 &amp;&amp; vsp&gt;=0) {
        animation=9;
        animations_framemin=20;
        animations_framemax=24;
        animations_return=22;
        animations_speed=30+abs(vsp*2);
        atk=1
        enable = 1;
        
    if  ground
        {action=0}
    }

    // -&gt; Punch 1 animation
    if (action==7 &amp;&amp; combo=1) {
        animation=10;
        animations_framemin=27;
        animations_framemax=30;
        animations_return=30;
        animations_speed=30;
        atk=1
        hsp=xdir
        enable = 1;
        
    if  animations_frame=30
        {action=0}
    }
    
    // -&gt; Punch 2 animation
    if (action==7 &amp;&amp; combo=2) {
        animation=11;
        animations_framemin=31;
        animations_framemax=34;
        animations_return=34;
        animations_speed=30;
        atk=1
        hsp=xdir
        enable = 1;
        
    if  animations_frame=34
        {action=0}
    }

     // -&gt; Punch 3 animation
    if (action==7 &amp;&amp; combo=3) {
        animation=12;
        animations_framemin=35;
        animations_framemax=40;
        animations_return=40;
        animations_speed=30;
        atk=1
        enable = 1;
        
    if  animations_frame=36
        {ground=0 vsp=-8}
        
    if  animations_frame=40
        {combo=0 action=0}
    }
    
    // -&gt; Grind animation
    if (action==8) {
        animation=13;
        animations_framemin=25;
        animations_framemax=26;
        animations_return=25;
        animations_speed=30+abs(hsp*2);
        atk=1
        enable = 1;
                
    if  abs(vsp)&gt;0
        {action=0}
    }
    
    // -&gt; Injury animation
    if (action==9) {
        animation=14;
        animations_framemin=104;
        animations_framemax=108;
        animations_return=108;
        animations_speed=30;
        atk=0
        hsp=-xdir*2
        speed=0
        enable = 0;
                
    if  ground
        {enable=1 action=0}
    }
    
    // -&gt; Dead animation (up)
    if (action==10 &amp;&amp; vspeed&lt;=0) {
        animation=15;
        animations_framemin=109;
        animations_framemax=109;
        animations_return=109;
        animations_speed=30;
        atk=0
        hsp=0
        enable=0
        depth=-100 
       }
       
    // -&gt; Dead animation (down)
    if (action==10 &amp;&amp; vspeed&gt;0) {
        animation=16;
        animations_framemin=110;
        animations_framemax=113;
        animations_return=113;
        animations_speed=30;
        atk=0
        hsp=0
        enable=0
        depth=-100  
       }
       
    // -&gt; Latch to wall animation
    if (action==11) {
        animation=17;
        animations_framemin=41;
        animations_framemax=42;
        animations_return=42;
        animations_speed=30;
        atk=1
        vsp=0
        hsp=xdir
        enable = 1;
        
    if  animations_frame=42
        {action=12}
       }

    // -&gt; Stand on wall animation
    if (action==12 &amp;&amp; vsp=0) {
        animation=18;
        animations_framemin=42;
        animations_framemax=42;
        animations_return=42;
        animations_speed=30;
        atk=1
        vsp=0
        hsp=xdir
        enable = 1;
       }

    // -&gt; Climb wall animation
    if (action==12 &amp;&amp; abs(vsp)&gt;0) {
        animation=19;
        animations_framemin=43;
        animations_framemax=49;
        animations_return=43;
        animations_speed=30;
        atk=1
        enable = 1;
        hsp=xdir
       }
       
    // -&gt; Climb up animation
    if (action==13) {
        animation=20;
        animations_framemin=50;
        animations_framemax=56;
        animations_return=56;
        animations_speed=30;
        atk=1
        hsp=xdir
        enable = 1;
        vsp=-0.8
        
    if  animations_frame=56
        {action=0}
       }
       
    // -&gt; Skidding
    if (action==14) {
        animation=21;
        animations_framemin=57;
        animations_framemax=57;
        animations_return=57;
        animations_speed=20;
        atk=1
        enable = 1;
       }
       
    if (action==animationDash) {
        animation=6;
        animations_framemin=16;
        animations_framemax=17;
        animations_return=16;
        animations_speed=30;
        atk=1
        enable = 1;
    }
    if (action==16) {
        animation=23;
        animations_framemin=58;
        animations_framemax=69;
        animations_return=62;
        animations_speed=30;
        atk=1
        enable = 0;
        
        if animations_frame &gt;= 62
           vsp = 13;
        else
            vsp = 0;
    }
    if (action==animationTrick) {
        animation=24;
        animations_framemin=70;
        animations_framemax=78;
        animations_return=78;
        animations_speed=20;
        atk=1
        enable = 0;
        
        if animations_frame == 78
            action = 6;
    }
    
    // -&gt; QTE animation
    if (action == 30) {
        animation=10;
        animations_framemin=18;
        animations_framemax=19;
        animations_return=18;
        animations_speed=30+abs(vsp*2);
        atk=0
        enable = 0;
    }
       
    //==========================================================
    // Core of the animation system

    // If animation changed, change to the new parameters...
    if (animation!=animations_old) {
        animations_frame=animations_framemin;
        animations_timer=0;
        animations_old=animation;
    }

    // Add to the timer
    animations_timer+=animations_speed

    if (animations_timer&gt;=100)  // Check if we are ready to change of frame
    {    
        animations_timer=0;
        animations_frame+=1;
        
        if (animations_frame&gt;animations_framemax)
        {
            animations_frame=animations_return;
        }
    }

    // Get angle of the animation
    if (ground || action==1)
    {
        animations_angle=angle;
    }
    
    // While not on the ground, rotate 
    if (!ground &amp;&amp; animations_angle&lt;180 &amp;&amp; animations_angle!=0 &amp;&amp; action!=1)
    {
        animations_angle-=4;
        if (animations_angle&lt;0) animations_angle=0;
    }
    
    if (!ground &amp;&amp; animations_angle&gt;180 &amp;&amp; animations_angle!=0 &amp;&amp; action!=1)
    {
        animations_angle+=4;
        if (animations_angle&gt;=360) animations_angle=0;
    }
    
    if (!ground &amp;&amp; animations_angle==180 &amp;&amp; action!=1)
    {
        animations_angle+=4*xdir;
    }
    // Draw the player
    
if blink&lt;5
{draw_sprite_ext(    sprSuperKnucklesActions,  animations_frame,   x,y,    xdir,   1,   animations_angle,    c_white,1)};
aura_index += 0.25;
draw_sprite_ext (sprSuperAuraK, aura_index, x, y, 1, 1, animations_angle, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
