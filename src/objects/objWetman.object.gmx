<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprWetmanStand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objEnemyParent2</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha = 0; //The wetman will become fully opaque when it starts to attack the player
initHpoints = 80; //The wetman's starting healthpoints, does not change
hpoints = initHpoints; //Neccesary for initializing health, changes
attackDamage = 1; //Damage dealt to the player if player makes contact
vel = 0; //Enemy's horizontal movement speed
yvel = 0; //Enemy's vertical movement speed
yfr = 0; //Gravity
action = 0; //The current action of wetman: 0 = standing, 1 = prepare, 2 = charge attack
actionframes = 120; //The timer for the wetman to change actions
enableguard = true; //Wether the guarding can be triggered
guarding = false; //If the wetman is currently guarding
canHit = true; //If enemy can be hit
isHit = false;
itemDrop = choose (0, obj5Gem); //Drops an item if destroyed
randomize();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if itemDrop != 0
    instance_create (x, y, itemDrop);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set the frames and timers

/*This code below is a series of checks to see if the wetman is opaque and what state the
wetman is currently in. The wetman has a timer to make sure it changes into the correct
animations.*/

if image_alpha == 1 //If the wetman is fully opaque
{
    image_speed = 0.26; //The speed of the animations
    
    if actionframes &gt; -1 &amp;&amp; action &lt; 2 //If the timer has not expired
       actionframes -= 1; //Decrease the timer by one, included alarms are not used
    else if action == 2
         actionframes += 1; 
    
    if action != 2 //If the wetman is not in its charge attack state
    {
        if actionframes &lt;= 0 //Triggers the action if the timer hits zero
        {
            if action == 0 //If in standing state
            {
                if !guarding //If wetman is not guarding
                {
                    action = 1; //Change to prepare-to-attack state
                    actionframes = 60; //Set the timer to 60 frames (1 second)
                }
                else //If the wetman is guarding
                {
                    guarding = false; //Disable the guard
                    action = 0; //Change to the standing state (safety check)
                    actionframes = 60; //Set the timer to 60 frames (1 second)
                }
            }
            else if action == 1 //If in prepare-to-attack state
            {
                action = 2; //Change to charge attack state
                enableguard = false; //Disable guarding
                actionframes = -1; //Disable the timer
            }
        }
    }
}
else //If the wetman is fully transparent
{
    sprite_index = sprWetmanStand; //Set the sprite to the stand sprite
    image_index = 0; //Set the image to the first one
    image_speed = 0; //Have no image animation
    image_alpha += 0.1; //Makes the wetman more opaque
    
    if image_alpha &gt; 1 //If beyond full opacity, set to full opacity
       image_alpha = 1;
}


//Apply the actions to the wetman

if action == 0 //If in standing state
{
    //Different checks depending on if the wetman is currently guarding
    if guarding == false //If it's not guarding
    {
        sprite_index = sprWetmanStand;
        vel = 0;
        
        if image_alpha == 1
            enableguard = true;
    }
    else //If it is guarding
    {
        sprite_index = sprWetmanGuard;
        vel = 0;
        
        if image_alpha == 1
            enableguard = true;
    }
    
    //Change the image_xscale depending on the player location
    if instance_exists (objPlayer) //Check to see if the player exists else we get an error
    {
        if x &gt;= objPlayer.x //If the player is to the left, face left
           image_xscale = -1;
        else if x &lt; objPlayer.x //If the player is to the right, face right
             image_xscale = 1;
     }
}
else if action == 1 //If in prepare state
{
    sprite_index = sprWetmanPrepare;
    vel = 0;
    enableguard = false;
    guarding = false;
    
    //Change the image_xscale depending on the player location
    if instance_exists (objPlayer) //Check to see if the player exists else we get an error
    {
        if x &gt;= objPlayer.x //If the player is to the left, face left
           image_xscale = -1;
        else if x &lt; objPlayer.x //If the player is to the right, face right
             image_xscale = 1;
     }
}
else if action == 2 //If in attack state
{
    sprite_index = sprWetmanAttack;
    enableguard = false;
    guarding = false;
    vel = (image_xscale*2.5);
    
    if vel &gt; 0
        vel -= 0.1;
    else if vel &lt; 0
         vel += 0.1;
    
    if place_meeting (x+1, y, objSolid2) or place_meeting (x-1, y, objSolid2)
    {
        vel = 0;
        action = 0;
        enableguard = true;
        guarding = false;
        actionframes = 60;
    }
}

if !enableguard
   guarding = false;

x += vel;
y += yvel;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSolid2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid (direction, 12);
yvel = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hpoints &lt; initHpoints
{
    draw_set_font (fntFont);
    scrDrawOutlines (x, y-75, hpoints, c_black, c_white, 2);
}

draw_sprite_ext (sprite_index, image_index, round(x), round(y), image_xscale, image_yscale, image_angle, image_blend, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
