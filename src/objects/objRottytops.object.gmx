<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRottytopsStand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>objPlayer</parentName>
  <maskName>mskRottytops</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ground = true;
vel = 0;
jumps = 0;
steptimer = 10;
sprite_old = sprite_index;

layer = 0;

attackStrengthDefault = 5;
attackStrength = attackStrengthDefault;

ducking = false;
kicking = false;
sliding = false;

itemselection = 0;
itemselectionmax = 6;
canMove = true;
canGetHit = true;

steptimer = 10;
soundstep = sndStepGrass;

if !instance_exists (objCamera) &amp;&amp; room_width &gt; 480 &amp;&amp; room_height &gt; 360
    instance_create (x, y, objCamera);
    
instance_create (x, y, objOptimize);

KEY_LEFT = keyboard_check (vk_left) //or (gamepad_axis_value (0, gp_axislh) &lt; -0.6);
KEY_RIGHT = keyboard_check (vk_right) //or (gamepad_axis_value (0, gp_axislh) &gt; 0.6);
KEY_DOWN = keyboard_check (vk_down) //or (gamepad_axis_value (0, gp_axislv) &gt; 0.6);
KEY_UP = keyboard_check (vk_up) //or (gamepad_axis_value (0, gp_axislv) &lt; -0.6);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_change (objShantaeClear, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canGetHit = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canMove = true;
sprite_index = sprRottytopsStand;
//image_alpha = 0.5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sliding = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//First, set the controls as these variables
KEY_LEFT = keyboard_check (vk_left) //or (gamepad_axis_value (0, gp_axislh) &lt; -0.6);
KEY_RIGHT = keyboard_check (vk_right) //or (gamepad_axis_value (0, gp_axislh) &gt; 0.6);
KEY_DOWN = keyboard_check (vk_down) //or (gamepad_axis_value (0, gp_axislv) &gt; 0.6);
KEY_UP = keyboard_check (vk_up) //or (gamepad_axis_value (0, gp_axislv) &lt; -0.6);

if x &lt; 3
    x = 3;
if x &gt; room_width - 3
    x = room_width - 3;
if y &lt; -5
    y = -5;

//Movement
if KEY_RIGHT &amp;&amp; !place_meeting (x+vel+1, y, objSolid2) &amp;&amp; !ducking &amp;&amp; !sliding &amp;&amp; !kicking &amp;&amp; canMove
{
    image_xscale = 1;
    vel = 3.25;
}
else if KEY_LEFT &amp;&amp; !place_meeting (x+vel-1, y, objSolid2) &amp;&amp; !ducking &amp;&amp; !sliding &amp;&amp; !kicking &amp;&amp; canMove
{
    image_xscale = -1;
    vel = -3.25;
}
else if (!KEY_LEFT &amp;&amp; !KEY_RIGHT &amp;&amp; !sliding) or place_meeting (x+vel+1, y, objSolid2) or place_meeting (x+vel-1, y, objSolid2) or (kicking &amp;&amp; ground) or !canMove or ducking
{
    vel = 0;
}

x += vel; //Do this or else the player cannot move and the variable would do nothing.

if sprite_index == sprRottytopsRun
    steptimer -= 1;

//Gravity
if ((place_meeting (x, y+vspeed+1, objSolid2) &amp;&amp; vspeed &gt;= 0) or (place_meeting (x, y+vspeed+1, objTopSolid) &amp;&amp; vspeed &gt;= 0) or (place_meeting (x, y+vspeed+1, objMovingPlatform) &amp;&amp; vspeed &gt;= 0) or (place_meeting (x, y+vspeed+1, objJumpThrough) &amp;&amp; layer == 1 &amp;&amp; vspeed &gt;= 0)) &amp;&amp; sprite_index != sprRottytopsHit //If the player is on the ground, set the gravity
{
    ground = true;
    gravity = 0;
    jumps = 0;
}
else //Otherwise, fall
{
    ground = false;
    sliding = false;
    if jumps &lt; 2 jumps = 1;
    gravity = 0.25;
}

//Set a speed limit to ensure that the player cannot fall faster than necessary
if vspeed &gt; 8
    vspeed = 8;
    
//Jump (press the Z key)
if ground &amp;&amp; canMove &amp;&amp; keyboard_check_pressed (ord("Z"))
{
    ground = false;
    sliding = false;
    audio_play_sound (sndRottyJump, 10, false);
    jumps = 1;
    vspeed = -8.5;
}
//Doublejump (press the Z key when in midair)
if !ground &amp;&amp; canMove &amp;&amp; jumps &gt; 0 &amp;&amp; jumps &lt; 2 &amp;&amp; vspeed &gt; -5 &amp;&amp; keyboard_check_pressed (ord("Z"))
{
    ground = false;
    sliding = false;
    audio_play_sound (sndRottyDoublejump, 10, false);
    jumps = 2;
    vspeed = -8.5;
}

//Ducking
if vel == 0 &amp;&amp; ground &amp;&amp; KEY_DOWN &amp;&amp; canMove &amp;&amp; sprite_index != sprRottytopsKick &amp;&amp; sprite_index != sprRottytopsHit
{
    ducking = true;
    mask_index = mskRottytopsDuck;
}
else if !KEY_DOWN
{
    ducking = false;
    mask_index = mskRottytops;
}

if ducking &amp;&amp; vel == 0 &amp;&amp; !kicking
    sprite_index = sprRottytopsDuck;

//Sprite handling
if ground &amp;&amp; sprite_index != sprRottytopsHit
{
    if vel == 0 &amp;&amp; !ducking &amp;&amp; !sliding &amp;&amp; !kicking sprite_index = sprRottytopsStand;
    else if vel == 0 &amp;&amp; !ducking &amp;&amp; kicking sprite_index = sprRottytopsKick;
    else if vel == 0 &amp;&amp; ducking &amp;&amp; kicking sprite_index = sprRottytopsDuckKick;
    else if vel != 0 &amp;&amp; !ducking &amp;&amp; !sliding sprite_index = sprRottytopsRun;
    else if vel != 0 &amp;&amp; !ducking &amp;&amp; sliding
    {
        sprite_index = sprRottytopsSlide;
        vel = (4*image_xscale);
        
        if alarm[0] &lt; 0 &amp;&amp; sliding alarm[0] = 65;
        else if !sliding alarm[0] = -1;
    }
}
else if sprite_index != sprRottytopsHit
{
    if !kicking
    {
        if vspeed &lt; 0 sprite_index = sprRottytopsJump;
        else sprite_index = sprRottytopsFall;
        
        if sprite_index == sprRottytopsFall
        {
            if image_index &gt; 7
                image_index = 4;
        }
    }
    else
    {
        sprite_index = sprRottytopsUpperKick;
    }
}

if !canMove sprite_index = sprRottytopsHit;

if sprite_index == sprRottytopsStand image_speed = 0.16;
else image_speed = 0.33;

//Kick attack
if keyboard_check_pressed (ord("X")) &amp;&amp; canMove &amp;&amp; ((!ground) or (ground &amp;&amp; vel == 0)) &amp;&amp; !kicking
{
    kicking = true;
    audio_play_sound (sndRottyHeavyKick, 10, false);
}

//Create hitbox
if sprite_index == sprRottytopsKick
{
    if image_index &gt; 3 &amp;&amp; image_index &lt; 5
    {        
        with instance_create (x, y, objRottytopsKickBox)
        {
            image_xscale = other.image_xscale;
        }
    }
}
else if sprite_index == sprRottytopsUpperKick
{
    if image_index &gt; 1 &amp;&amp; image_index &lt; 3
    {        
        with instance_create (x, y, objRottytopsUpperKickBox)
        {
            image_xscale = other.image_xscale;
        }
    }
}
else if sprite_index == sprRottytopsDuckKick
{
    if image_index &gt; 0 &amp;&amp; image_index &lt; 1
    {        
        with instance_create (x, y, objRottytopsDuckKickBox)
        {
            image_xscale = other.image_xscale;
        }
    }
}

//Collision with a moving platform
var platformID; //This is only a temporary variable, this checks for a particular platform
platformID = (instance_place (x, y+1, objMovingPlatform));
//vplatformID = (instance_place (x, y+1, objMovingPlatformV));

if platformID != noone
{
    hsp = platformID.hsp;
    vsp = platformID.vsp;
}
else
{
    hsp = 0;
    vsp = 0;
}
    
//Play stepping SFX
steptimer -= 1;

if ground &amp;&amp; sprite_index == sprRottytopsRun &amp;&amp; ((image_index &gt; 3 &amp;&amp; image_index &lt; 4) or (image_index &gt; 8 &amp;&amp; image_index &lt; 9)) &amp;&amp; steptimer &lt;= 0
{
    audio_play_sound (soundstep, 10, false);
    steptimer = 10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSlopeParent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scrCollideSlopes2();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSolid2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>move_contact_solid (direction, 12);
vspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if kicking
{
    kicking = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create (0, 0, objLives);
instance_create (0, 0, objLivesCounterRotty);
instance_create (0, 0, objGems);
instance_create (0, 0, objGemCounter);
instance_create (0, 0, objHeartCounter);
instance_create (0, 0, objItemHUD);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if y &gt; room_height
{
    global.hearts = 0;
    instance_change (objRottytopsDie, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if sprite_old != sprite_index
{
    sprite_old = sprite_index;
    image_index = 0;
}

if !canGetHit
    draw_sprite_ext (sprite_index, image_index, round(x), round(y), image_xscale, 1, 0, c_white, 0.5);
else if sprite_index != sprRottytopsHit
    draw_sprite_ext (sprite_index, image_index, round(x), round(y), image_xscale, 1, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create (x-20, y-80, objInventoryBarSmall);
itemselection += 1;

if itemselection == 1 &amp;&amp; global.fleshpops == 0
   itemselection = 2;
if itemselection == 2 &amp;&amp; global.monstermilk == 0
   itemselection = 3;
if itemselection == 3 &amp;&amp; global.super_monstermilk == 0
   itemselection = 4;
if itemselection == 4 &amp;&amp; global.pikeballs == 0
   itemselection = 5;
if itemselection == 5 &amp;&amp; global.superpikeballs == 0
   itemselection = 6;
if itemselection == 6 &amp;&amp; global.bubbleshields == 0
   itemselection = 7;
if itemselection == 7 &amp;&amp; global.keys == 0
   itemselection = 0;
/*if itemselection == 8 &amp;&amp; global.keys == 0 //&amp;&amp; (global.ringItem == 0 or global.ringItem == 2)
   itemselection = 0;*/

if itemselection &gt; itemselectionmax
   itemselection = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Use the items that we have currently selected

/*The items are selected by using the A/D keys. When we get to a specific item, use the
appropriate one, depending on what exactly was being selected.*/

//Here's how it goes.

if itemselection != 0
{
    switch itemselection
    {
        case 1:
            if global.fleshpops &gt; 0
            {
                global.fleshpops -= 1;
                global.hearts += 6;
            }
        break;
        case 2:
        
        break;
        case 3:
        
        break;
        case 4:
            if !instance_exists (objPikeBall) &amp;&amp; !instance_exists (objSuperPikeBall) &amp;&amp; global.pikeballs &gt; 0
            {
                global.pikeballs -= 1;
                instance_create (x, y, objPikeBall);
                audio_play_sound (sndShield, 10, false);
            }
        break;
        case 5:
            if !instance_exists (objPikeBall) &amp;&amp; !instance_exists (objSuperPikeBall) &amp;&amp; global.superpikeballs &gt; 0
            {
                global.superpikeballs -= 1;
                instance_create (x, y, objSuperPikeBall);
                audio_play_sound (sndShield, 10, false);
            }
        break;
        case 6:
            if !instance_exists (objBubbleshield) &amp;&amp; global.bubbleshields &gt; 0
            {
                global.bubbleshields -= 1;
                instance_create (x, y, objBubbleshield);
                audio_play_sound (sndShield, 10, false);
            }
        break;
        case 7:
        
        break;
    }
}
else //If we don't have an item selected, use special moves
{
    //Slide (press C while on the ground and moving [must be purchased first])
    if ground &amp;&amp; vel != 0 &amp;&amp; !sliding
    {
        sliding = true;
        audio_play_sound (sndRottySlide, 10, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_create (x-20, y-80, objInventoryBarSmall);
itemselection -= 1;

if itemselection == 1 &amp;&amp; global.fleshpops == 0
   itemselection = 0;
if itemselection == 2 &amp;&amp; global.monstermilk == 0
   itemselection = 1;
if itemselection == 3 &amp;&amp; global.super_monstermilk == 0
   itemselection = 2;
if itemselection == 4 &amp;&amp; global.pikeballs == 0
   itemselection = 3;
if itemselection == 5 &amp;&amp; global.superpikeballs == 0
   itemselection = 4;
if itemselection == 6 &amp;&amp; global.bubbleshields == 0
   itemselection = 5;
if itemselection == 7 &amp;&amp; global.keys == 0
   itemselection = 6;

if itemselection &lt; 0
   itemselection = itemselectionmax;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
