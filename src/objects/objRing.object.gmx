<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprRing</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>objDeactivable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.16;
attracted = false;
angle_to_player = 0;
speedX = 0;
speedY = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists (objSonicModified)
{
    if (objSonicModified != noone)
        {
            if (global.shield = 2)
            {
                distance_to_player = distance_to_object(objSonicModified);
                if (distance_to_player &lt; 80) attracted = true;
            }
            else attracted = false;
        }
        
        // If so, go towards the player
        if ( attracted = true ) 
        {        
            angle_to_player = degtorad(move_towards_point(objSonicModified.x, objSonicModified.y, 5));
            
            speedX = min(10, max(-10, speedX+cos(angle_to_player)*0.4));
            speedY = min(10, max(-10, speedY-sin(angle_to_player)*0.4));
        }
}
//Collect the ring
if collision_circle (x, y, 25, objPlayer, 0, 1)
{
    audio_play_sound (sndRing, 10, false);
    repeat 5 effect_create_above(ef_spark,x-10+random(20),y-10+random(20),0.1,c_yellow)
    
    if room != rmMinigameSonicSpeedRacing global.rings += 1;
    else
    {
        if instance_nearest(x, y, objPlayer).ID == 0 global.ringsP1 += 1;
        else if instance_nearest(x, y, objPlayer).ID == 1 global.ringsP2 += 1;
    }
    
    if instance_exists (objDarkBar) global.dark_energy += 1;
    global.totalrings[global.savedata] += 1;
    global.points += 10;
    if room != rmMinigameSonicSpeedRacing instance_destroy();
    else instance_change (objRingWait, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
